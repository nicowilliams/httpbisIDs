#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass docbook
\use_default_options true
\maintain_unincluded_children false
\begin_local_layout
Format 31

InsetLayout Flex:PI_Strict
    LyXType Custom
    HTMLTag div
    LabelString PI_Strict
End

InsetLayout Flex:PI
    LyXType Custom
    HTMLTag div
    LabelString PI
End

InsetLayout Flex:PI_SymRefs
    LyXType Custom
    HTMLTag div
    LabelString PI_SymRefs
End

InsetLayout Flex:PI_SortRefs
    LyXType Custom
    HTMLTag div
    LabelString PI_SortRefs
End

InsetLayout Flex:PI_TOC
    LyXType Custom
    HTMLTag div
    LabelString PI_TOC
End

InsetLayout Flex:PI_TOCIndent
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCIndent
End

InsetLayout Flex:PI_TOCDepth
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCDepth
End

InsetLayout Flex:PI_TOCNarrow
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCNarrow
End

InsetLayout Flex:PI_TOCCompact
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCCompact
End

InsetLayout Flex:PI_TOCAppendix
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCAppendix
End

InsetLayout Flex:DocName
    LyXType Custom
    HTMLTag div
    LabelString DocName
End

InsetLayout Flex:IntendedStatus
    LyXType Custom
    HTMLTag div
    LabelString IntendedStatus
End

InsetLayout Flex:Updates
    LyXType Custom
    HTMLTag div
    LabelString Updates
End

InsetLayout Flex:Obsoletes
    LyXType Custom
    HTMLTag div
    LabelString Obsoletes
End

InsetLayout Flex:SeriesNo
    LyXType Custom
    HTMLTag div
    LabelString SeriesNo
End

InsetLayout Flex:RFCNumber
    LyXType Custom
    HTMLTag div
    LabelString RFCNumber
End

InsetLayout Flex:IPR
    LyXType Custom
    HTMLTag div
    LabelString IPR
End

InsetLayout Flex:IETFArea
    LyXType Custom
    HTMLTag div
    LabelString IETFArea
End

InsetLayout Flex:IETFWorkingGroup
    LyXType Custom
    HTMLTag div
    LabelString IETFWorkingGroup
End

InsetLayout Flex:XML2RFCKeyword
    LyXType Custom
    HTMLTag div
    LabelString XML2RFCKeyword
End

InsetLayout Flex:TitleAbbrev
    LyXType Custom
    HTMLTag div
    LabelString TitleAbbrev
End

InsetLayout Flex:AuthorRole
    LyXType Custom
    HTMLTag div
    LabelString AuthRole
End

InsetLayout Flex:AuthorInitials
    LyXType Custom
    HTMLTag div
    LabelString AuthInitials
End

InsetLayout Flex:AuthorSurname
    LyXType Custom
    HTMLTag div
    LabelString AuthSurname
End

InsetLayout Flex:AuthorOrg
    LyXType Custom
    HTMLTag div
    LabelString AuthOrg
End

InsetLayout Flex:AuthorOrgAbbrev
    LyXType Custom
    HTMLTag div
    LabelString AuthOrgAbbrev
End

InsetLayout Flex:AuthorEmailAddr
    LyXType Custom
    HTMLTag div
    LabelString AuthEmailAddr
End

InsetLayout Flex:AuthorAddrStreet
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrStreet
End

InsetLayout Flex:AuthorAddrCity
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCity
End

InsetLayout Flex:AuthorAddrRegion
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrRegion
End

InsetLayout Flex:AuthorAddrCode
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCode
End

InsetLayout Flex:AuthorAddrCountry
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCountry
End

InsetLayout Flex:EntityXRef
    LyXType Custom
    HTMLTag div
    LabelString EntityXRef
End

InsetLayout Flex:BibXML
    LyXType Custom
    HTMLTag div
    LabelString BibXML
End

InsetLayout Flex:EmbeddedBibXML
    LyXType Custom
    HTMLTag div
    LabelString EmbeddedBibXML
End
\end_local_layout
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman cmr
\font_sans cmss
\font_typewriter cmtt
\font_default_family ttdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Channel Binding Signalling for the Generic Security Services Application
 Programming Interface
\end_layout

\begin_layout Standard
\begin_inset Flex DocName
status open

\begin_layout Plain Layout
draft-williams-kitten-channel-bound-flag-03
\end_layout

\end_inset


\begin_inset Flex IPR
status open

\begin_layout Plain Layout
trust200902
\end_layout

\end_inset


\begin_inset Flex IntendedStatus
status open

\begin_layout Plain Layout
std
\end_layout

\end_inset


\begin_inset Flex TitleAbbrev
status open

\begin_layout Plain Layout
GSS Channel Bound Flag
\end_layout

\end_inset


\begin_inset Flex IETFArea
status open

\begin_layout Plain Layout
Security Area
\end_layout

\end_inset


\begin_inset Flex XML2RFCKeyword
status open

\begin_layout Plain Layout
Internet-Draft
\end_layout

\end_inset


\begin_inset Flex Updates
status open

\begin_layout Plain Layout
RFC2743 RFC2744
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex PI TOC
status open

\begin_layout Plain Layout
yes
\end_layout

\end_inset


\begin_inset Flex PI SymRefs
status open

\begin_layout Plain Layout
yes
\end_layout

\end_inset


\begin_inset Flex PI TOCIndent
status open

\begin_layout Plain Layout
no
\end_layout

\end_inset


\begin_inset Flex PI
status open

\begin_layout Plain Layout
comments="yes"
\end_layout

\end_inset


\begin_inset Flex PI
status open

\begin_layout Plain Layout
inline="yes"
\end_layout

\end_inset


\end_layout

\begin_layout Author
Nicolas Williams
\begin_inset Flex AuthorOrg
status open

\begin_layout Plain Layout
Cryptonector, LLC
\end_layout

\end_inset


\begin_inset Flex AuthorOrgAbbrev
status open

\begin_layout Plain Layout
Cryptonector
\end_layout

\end_inset


\begin_inset Flex AuthorEmailAddr
status open

\begin_layout Plain Layout
nico@cryptonector.com
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
Channel binding is a technique that allows applications to use a secure
 channel at a lower layer without having to use authentication at that lower
 layer.
 The concept of channel binding comes from the Generic Security Services
 Application Programming Interface (GSS-API).
 It turns out that the semantics implemented are different that those specified
 in RFC2743, and the specification has a serious bug.
 This document addresses both, the inconsistency as-implemented and the
 specification bug.
\end_layout

\begin_layout Abstract
This Internet-Draft proposes the addition of a 
\begin_inset Quotes eld
\end_inset

channel bound
\begin_inset Quotes erd
\end_inset

 return flag for the GSS_Init_sec_context() and GSS_Accept_sec_context()
 functions.
 Two behaviors are specified: a default, safe behavior reflecting existing
 implementation deployments, and a behavior that is only safe when the applicati
on specifically tells the GSS-API that it (the application) supports the
 new behavior.
 Additional API elements related to this are also added.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The GSS-API 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC2743
\end_layout

\end_inset

 supports 
\begin_inset Quotes eld
\end_inset

channel binding
\begin_inset Quotes erd
\end_inset

 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC5056
\end_layout

\end_inset

, a technique for detection of man-in-the-middle (MITM) attacks in secure
 channels at lower network layers.
 This facility is meant to be all-or-nothing: either both the initiator
 and acceptor use it and it succeeds, or both must not use it.
 This has created a negotiation problem when retrofitting the use of channel
 binding into existing application protocols.
\end_layout

\begin_layout Standard
Many implementations of the Kerberos V5 GSS-API mechanism 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC4121
\end_layout

\end_inset

 cause the acceptor to succeed when the initiator used channel binding but
 the acceptor application did not.
 This has helped deployment of channel binding in existing applications:
 first fix all the initiators, then fix all the acceptors.
 But even this is insufficient when there are many clients to fix, such
 that fixing them all will take a long time.
\end_layout

\begin_layout Standard
This document proposes a new method for deployment of channel binding that
 allows the feature to be enabled on the acceptor side before fixing all
 initiators.
 If the GSS-API had always had a return flag by which to indicate channel
 binding state then we could have had a simpler method of deploying channel
 binding: applications check that return flag and act accordingly (e.g., fail
 when channel binding is required).
 We cannot safely introduce this behavior now without an indication of support
 by the application.
\end_layout

\begin_layout Standard
It is worth noting that at least one implementor of GSS-API mechanisms (but
 not of the GSS-API itself) has similar semantics in its API to those proposed
 herein.
 [XXX add references to the relevant SSPI docs? -Nico]
\end_layout

\begin_layout Standard
Additionally, there may be applications where it is important for initiators
 to know that acceptors did use channel binding, and even to know whether
 a mechanism is capable of indicating as much.
 We add a request flag and two mechanism attributes for such applications.
\end_layout

\begin_layout Subsection
Error in RFC2743
\end_layout

\begin_layout Standard
The GSS-APIv2u1 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC2743
\end_layout

\end_inset

 seems to indicate that mechanisms must ignore channel bindings when one
 party provided none.
 In practice some mechanisms ignore channel bindings when the acceptor provides
 none, but not when the initiator provides none.
 Note that it would be useless to allow security context establishment to
 succeed when the initiator does not provide channel bindings but the acceptor
 does, at least as long as there's no outward indication of whether channel
 binding was used! And indeed, the GSS-APIv2u1 does not provide any such
 indication.
 We correct this flaw in this document.
\end_layout

\begin_layout Subsection
Design
\end_layout

\begin_layout Standard
After some discussion on the mailing list of various designs for signalling
 application support for the new flag we've settled on copying an aspect
 of the Java Bindings of the GSS-API 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC5653
\end_layout

\end_inset

, specifically the notion of creating an 
\begin_inset Quotes eld
\end_inset

empty
\begin_inset Quotes erd
\end_inset

 SECURITY CONTEXT handle that can then be passed to GSS_Init_sec_context()
 and GSS_Accept_sec_context() where they normally expect a NULL handle.
 This empty security context handle can then be used to set options relating
 to security context token establishment.
\end_layout

\begin_layout Standard
In 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
I-D.williams-williams-kitten-ctx-simple-async
\end_layout

\end_inset

 we explore and extend this design to produce a more usable GSS-API (as
 well as support for asynchronous operation).
\end_layout

\begin_layout Subsection
Alternative Design
\end_layout

\begin_layout Standard
The previous design was based on an existing, non-standard extension for
 carrying security context establishment options in CREDENTIAL HANDLEs.
 Note that a notion of CREDENTIAL HANDLE options might still be useful for
 options that are really specific to credentials rather than security context
 tokens (for example: setting an acceptable cryptographic security profile
 on a CREDENTIAL HANDLE and receiving a new handle with possibly fewer elements,
 reflecting that some credentials cannot meet the requirement).
\end_layout

\begin_layout Subsection
Future Directions
\end_layout

\begin_layout Standard
We're likely to introduce additional mutator functions of empty contexts,
 with mutators corresponding to many of the existing input arguments of
 GSS_Init_sec_context() and GSS_Accept_sec_context(), as well as a few additiona
l security context inquiry functions.
 We're also likely to then introduce new variants of GSS_Init_sec_context()
 and GSS_Accept_sec_context() with all of those input and output parameters
 removed that could be set or retrieved with the other new functions.
 The only inputs that the new GSS_Init/Accept_sec_context() must have are:
 a security context handle (never NULL), and an input context token, and
 the only outputs should be the status indicators and an output token --
 in fact, we may want to have just one new function called, perhaps, GSS_Step_se
c_context(), with the role of initiator or acceptor set as a context option.
\end_layout

\begin_layout Standard
See 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
I-D.williams-williams-kitten-ctx-simple-async
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Conventions used in this document
\end_layout

\begin_layout Standard
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
 "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are
 to be interpreted as described in 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC2119
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Channel Binding State Extension
\end_layout

\begin_layout Standard
We propose a new return flag for GSS_Init_sec_context() and GSS_Accept_sec_conte
xt(), as well as a pair of functions for a) creating 
\begin_inset Quotes eld
\end_inset

empty
\begin_inset Quotes erd
\end_inset

 security context handles, b) setting req_flags and indicating which ret_flags
 the application understands.
 We also add new mechanism attributes describing mechanism capabilities.
\end_layout

\begin_layout Standard
C bindings of these extensions are provided along the lines of 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC2744
\end_layout

\end_inset

 and 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC5587
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
In the future we might move more of the many input (and output) arguments
 to GSS_Init_sec_context() and GSS_Accept_sec_context() into mutators on
 empty security context handles.
\end_layout

\begin_layout Subsection
GSS_Create_sec_context()
\end_layout

\begin_layout Standard
Inputs:
\end_layout

\begin_layout Itemize
<none>
\end_layout

\begin_layout Standard
Outputs:
\end_layout

\begin_layout Itemize
major_status INTEGER
\end_layout

\begin_layout Itemize
minor_status INTEGER -- note: mostly useless, but we should keep it
\end_layout

\begin_layout Itemize
context SECURITY CONTEXT
\end_layout

\begin_layout Standard
Return major status codes:
\end_layout

\begin_layout Itemize
GSS_S_COMPLETE indicates success.
\end_layout

\begin_layout Itemize
GSS_S_UNAVAILABLE indicates that memory is not available, for example.
\end_layout

\begin_layout Itemize
GSS_S_FAILURE indicates a general failure.
\end_layout

\begin_layout Standard
This function creates an 
\begin_inset Quotes eld
\end_inset

empty
\begin_inset Quotes erd
\end_inset

 security context handle that can be passed to GSS_Init_sec_context() or
 GSS_Accept_sec_context() where they expect a NULL context.
\end_layout

\begin_layout Subsubsection
C-Bindings
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 OM_uint32
\end_layout

\begin_layout Plain Layout

 gss_create_sec_context(OM_uint32 *minor_status,
\end_layout

\begin_layout Plain Layout

                        gss_ctx_id_t *context);
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
GSS_Set_context_flags()
\end_layout

\begin_layout Standard
Inputs:
\end_layout

\begin_layout Description
context
\begin_inset space ~
\end_inset

CONTEXT
\begin_inset space ~
\end_inset

HANDLE 
\end_layout

\begin_layout Description
req_flags
\begin_inset space ~
\end_inset

FLAGS Requested flags.
 Applicable to acceptors and initiators.
\end_layout

\begin_layout Description
ret_flags_understood
\begin_inset space ~
\end_inset

FLAGS The set of return flags understood by the caller.
\end_layout

\begin_layout Standard
Outputs:
\end_layout

\begin_layout Itemize
major_status INTEGER
\end_layout

\begin_layout Itemize
minor_status INTEGER
\end_layout

\begin_layout Standard
Return major status codes:
\end_layout

\begin_layout Itemize
GSS_S_COMPLETE indicates success.
\end_layout

\begin_layout Itemize
GSS_S_FAILURE indicates a general failure.
\end_layout

\begin_layout Standard
This function tells the mechanism (when one is eventually chosen and invoked)
 that the application requests the given req_flags and undestands the given
 ret_flags.
 Initiators can override the req_flags in their GSS_Init_sec_context() call,
 but if no flags are requested there then the req_flags set on the empty
 context will be used.
\end_layout

\begin_layout Standard
NOTE: The abstract GSS-API 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC2743
\end_layout

\end_inset

 uses individual elements -one per-flag- instead of a 
\begin_inset Quotes eld
\end_inset

FLAGS
\begin_inset Quotes erd
\end_inset

 type.
 This is unwieldy, therefore we introduce an abstract type named 
\begin_inset Quotes eld
\end_inset

FLAGS
\begin_inset Quotes erd
\end_inset

 to act as a set of all the request/return flags defined for the abstract
 GSS-API.
\end_layout

\begin_layout Subsubsection
C-Bindings
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 OM_uint32
\end_layout

\begin_layout Plain Layout

 gss_set_context_flags(OM_uint32 *minor_status,
\end_layout

\begin_layout Plain Layout

                       gss_ctx_id_t context,
\end_layout

\begin_layout Plain Layout

                       uint64_t req_flags,
\end_layout

\begin_layout Plain Layout

                       uint64_t ret_flags);
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Return Flag for Channel Binding State Signalling 
\end_layout

\begin_layout Standard
Whenever both the initiator and the acceptor provide matching channel bindings
 to GSS_Init_sec_context() and GSS_Accept_sec_context(), respectively, then
 the mechanism SHALL indicate that the context is channel bound via an output
 flag, ret_channel_bound_flag, for the established context.
 Note that some mechanisms have no way for the acceptor to signal CB success
 to the initiator, in which case GSS_Init_sec_context() MUST NOT output
 the ret_channel_bound_flag.
\end_layout

\begin_layout Subsubsection
C-Bindings
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 #define GSS_C_CHANNEL_BOUND_FLAG 2048 /* 0x00000800 */
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
New Mechanism Attributes
\end_layout

\begin_layout Itemize
We add a new mechanism attribute, GSS_C_MA_CBINDING_CONFIRM, to indicate
 that the initiator can and always does learn whether the acceptor application
 supplied channel bindings.
\end_layout

\begin_layout Itemize
We add a new mechanism attribute, GSS_C_MA_CBINDING_MAY_CONFIRM, to indicate
 that the initiator may learn whether the acceptor application supplied
 channel bindings, but only when the acceptor implementation of the mechanism
 has been suitably updated.
\end_layout

\begin_layout Standard
OID assignments TBD.
\end_layout

\begin_layout Subsection
Request Flag for Acceptor Confirmation of Channel Binding
\end_layout

\begin_layout Standard
We add a new request flag for GSS_Init_sec_context(), req_cb_confirmation_flag,
 to be used by initiators that insist on acceptors providing channel bindings.
 This flag is only of use to mechanism-negotiation pseudo-mechanisms (e.g.,
 SPNEGO 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC4178
\end_layout

\end_inset

): if set the pseudo-mechanism MUST NOT negotiate any mechanisms that lack
 the GSS_C_MA_CBINDING_CONFIRM or GSS_C_MA_CBINDING_MAY_CONFIRM mechanism
 attributes, and SHOULD NOT negotiate mechanisms that lack the GSS_C_MA_CBINDING
_CONFIRM mechanism attribute (except if allowed by local configuration).
\end_layout

\begin_layout Subsubsection
C-Bindings
\end_layout

\begin_layout Standard
Because GSS_C_CHANNEL_BOUND_FLAG is a return flag only, and this flag is
 a request flag only, and to save on precious flag bits, we use the same
 flag bit assignment for both flags:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 #define GSS_C_CB_CONFIRM_FLAG 2048 /* 0x00000800 */
\end_layout

\end_inset


\end_layout

\begin_layout Section
Modified Channel Binding Semantics
\end_layout

\begin_layout Standard
The channel binding semantics of the base GSS-API are modified as follows:
\end_layout

\begin_layout Itemize
Whenever both, the initiator and acceptor shall have provided input_channel_bind
ings to GSS_Init/Accept_sec_context() and the channel bindings do not match,
 then the mechanism MUST fail to establish a security context token.
 This is a restatement of an existing requirement in the base specification,
 restated for convenience.
\end_layout

\begin_layout Itemize
Whenever the acceptor application shall have a) provided channel bindings
 to GSS_Accept_sec_context(), and b) not indicated support for the ret_channel_b
ound_flag flag, then the mechanism MUST fail to establish a security context
 if the initiator did not provide channel bindings data.
 This requirement is for security purposes, to make applications predating
 this document secure, and this requirement reflects actual implementations
 as deployed.
\end_layout

\begin_layout Itemize
Whenever the initiator application shall have a) provided channel bindings
 to GSS_Init_sec_context(), and b) not indicated support for the ret_channel_bou
nd_flag flag, then the mechanism SHOULD NOT fail to establish a security
 context just because the acceptor failed to provide channel bindings data.
 This recommendation is for interoperability purposes, and reflects actual
 implementations that have been deployed.
 It is possible that not all security mechanism protocols can implement
 this requirement easily.
\end_layout

\begin_layout Itemize
Whenever the application shall have a) provided channel bindings to GSS_Init_sec
_context() or GSS_Accept_sec_context(), and b) indicated support for the
 ret_channel_bound_flag flag, then the mechanism MUST NOT fail to establish
 a security context just because the peer did not provide channel bindings
 data.
 The mechanism MUST output the ret_channel_bound_flag if both peers provided
 the same input_channel_bindings to GSS_Init_sec_context() and GSS_Accept_sec_co
ntext.
 The mechanism MUST NOT output the ret_channel_bound_flag if either (or
 both) peer did not provide input_channel_bindings to GSS_Init/Accept_sec_contex
t().
 This requirement restores the original base GSS-API specified behavior,
 with the addition of the ret_channel_bound_flag flag
\end_layout

\begin_layout Section
Security Considerations
\end_layout

\begin_layout Standard
This document deals with security.
 There are no security considerations that should be documented separately
 in this section.
 To recap, this document fixes a significant flaw in the base GSS-API 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC2743
\end_layout

\end_inset

 specification that fortunately has not been implemented, and it adds a
 feature (that should have been in the base specification) for improved
 negotiation of use of channel binding 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC5056
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
IANA Considerations
\end_layout

\begin_layout Standard
This document has no IANA considerations.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:References"

\end_inset

Normative References
\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc2119"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc2743"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2743.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc2744"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2744.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc5056"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5056.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc5587"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5587.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Informative References
\end_layout

\begin_layout Standard
\begin_inset Flex EmbeddedBibXML
status collapsed

\begin_layout Plain Layout
<reference anchor="I-D.williams-williams-kitten-ctx-simple-async"> <front>
 <title>Simplified and Asynchronous Security Context Interfaces for the
 Generic Security Services Application Programming Interface</title> <author
 initials="N." surname="Williams" fullname="Nicolas Williams"> <organization/>
 </author> <date month="February" day="13" year="2013"/> <abstract> <t>Abstract
 This Internet-Draft proposes extensions to the Generic Security Services
 Application Programming Interface (GSS-API) for replacing the exiting GSS_Init_
sec_context() and GSS_Accept_sec_context() functions with simplified forms
 that also support asynchrony.</t> </abstract> </front> <seriesInfo name="Interne
t-Draft" value="draft-williams-williams-kitten-ctx-simple-async-00"/> <format
 type="TXT" target="http://www.ietf.org/internet-drafts/draft-williams-williams-ki
tten-ctx-simple-async-00.txt"/> </reference>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc4121"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4121.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc4178"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4178.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc5653"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5653.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
