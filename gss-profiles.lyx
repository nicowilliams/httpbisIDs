#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass docbook
\use_default_options true
\maintain_unincluded_children false
\begin_local_layout
Format 31

InsetLayout Flex:PI_Strict
    LyXType Custom
    HTMLTag div
    LabelString PI_Strict
End

InsetLayout Flex:PI
    LyXType Custom
    HTMLTag div
    LabelString PI
End

InsetLayout Flex:PI_SymRefs
    LyXType Custom
    HTMLTag div
    LabelString PI_SymRefs
End

InsetLayout Flex:PI_SortRefs
    LyXType Custom
    HTMLTag div
    LabelString PI_SortRefs
End

InsetLayout Flex:PI_TOC
    LyXType Custom
    HTMLTag div
    LabelString PI_TOC
End

InsetLayout Flex:PI_TOCIndent
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCIndent
End

InsetLayout Flex:PI_TOCDepth
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCDepth
End

InsetLayout Flex:PI_TOCNarrow
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCNarrow
End

InsetLayout Flex:PI_TOCCompact
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCCompact
End

InsetLayout Flex:PI_TOCAppendix
    LyXType Custom
    HTMLTag div
    LabelString PI_TOCAppendix
End

InsetLayout Flex:DocName
    LyXType Custom
    HTMLTag div
    LabelString DocName
End

InsetLayout Flex:IntendedStatus
    LyXType Custom
    HTMLTag div
    LabelString IntendedStatus
End

InsetLayout Flex:Updates
    LyXType Custom
    HTMLTag div
    LabelString Updates
End

InsetLayout Flex:Obsoletes
    LyXType Custom
    HTMLTag div
    LabelString Obsoletes
End

InsetLayout Flex:SeriesNo
    LyXType Custom
    HTMLTag div
    LabelString SeriesNo
End

InsetLayout Flex:RFCNumber
    LyXType Custom
    HTMLTag div
    LabelString RFCNumber
End

InsetLayout Flex:IPR
    LyXType Custom
    HTMLTag div
    LabelString IPR
End

InsetLayout Flex:IETFArea
    LyXType Custom
    HTMLTag div
    LabelString IETFArea
End

InsetLayout Flex:IETFWorkingGroup
    LyXType Custom
    HTMLTag div
    LabelString IETFWorkingGroup
End

InsetLayout Flex:XML2RFCKeyword
    LyXType Custom
    HTMLTag div
    LabelString XML2RFCKeyword
End

InsetLayout Flex:TitleAbbrev
    LyXType Custom
    HTMLTag div
    LabelString TitleAbbrev
End

InsetLayout Flex:AuthorRole
    LyXType Custom
    HTMLTag div
    LabelString AuthRole
End

InsetLayout Flex:AuthorInitials
    LyXType Custom
    HTMLTag div
    LabelString AuthInitials
End

InsetLayout Flex:AuthorSurname
    LyXType Custom
    HTMLTag div
    LabelString AuthSurname
End

InsetLayout Flex:AuthorOrg
    LyXType Custom
    HTMLTag div
    LabelString AuthOrg
End

InsetLayout Flex:AuthorOrgAbbrev
    LyXType Custom
    HTMLTag div
    LabelString AuthOrgAbbrev
End

InsetLayout Flex:AuthorEmailAddr
    LyXType Custom
    HTMLTag div
    LabelString AuthEmailAddr
End

InsetLayout Flex:AuthorAddrStreet
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrStreet
End

InsetLayout Flex:AuthorAddrCity
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCity
End

InsetLayout Flex:AuthorAddrRegion
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrRegion
End

InsetLayout Flex:AuthorAddrCode
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCode
End

InsetLayout Flex:AuthorAddrCountry
    LyXType Custom
    HTMLTag div
    LabelString AuthAddrCountry
End

InsetLayout Flex:EntityXRef
    LyXType Custom
    HTMLTag div
    LabelString EntityXRef
End

InsetLayout Flex:BibXML
    LyXType Custom
    HTMLTag div
    LabelString BibXML
End
\end_local_layout
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman cmr
\font_sans cmss
\font_typewriter cmtt
\font_default_family ttdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Simplified and Minimized Profiles of the Generic Security Services Application
 Programming Interface
\end_layout

\begin_layout Standard
\begin_inset Flex DocName
status open

\begin_layout Plain Layout
draft-williams-gss-profiles-00
\end_layout

\end_inset


\begin_inset Flex IPR
status open

\begin_layout Plain Layout
trust200902
\end_layout

\end_inset


\begin_inset Flex IntendedStatus
status open

\begin_layout Plain Layout
info
\end_layout

\end_inset


\begin_inset Flex TitleAbbrev
status open

\begin_layout Plain Layout
GSS-API Profiles
\end_layout

\end_inset


\begin_inset Flex IETFArea
status open

\begin_layout Plain Layout
Security Area
\end_layout

\end_inset


\begin_inset Flex XML2RFCKeyword
status open

\begin_layout Plain Layout
Internet-Draft
\end_layout

\end_inset


\begin_inset Flex PI
status open

\begin_layout Plain Layout
tocindent="no"
\end_layout

\end_inset


\begin_inset Flex PI
status open

\begin_layout Plain Layout
comments="yes"
\end_layout

\end_inset


\begin_inset Flex PI
status open

\begin_layout Plain Layout
inline="yes"
\end_layout

\end_inset


\end_layout

\begin_layout Author
Nicolas Williams
\begin_inset Flex AuthorOrg
status open

\begin_layout Plain Layout
Cryptonector, LLC
\end_layout

\end_inset


\begin_inset Flex AuthorOrgAbbrev
status open

\begin_layout Plain Layout
Cryptonector
\end_layout

\end_inset


\begin_inset Flex AuthorEmailAddr
status open

\begin_layout Plain Layout
nico@cryptonector.com
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
The Generic Security Service Application Programming Interface (GSS-API)
 is often mistaken for a bloated framework.
 The GSS-API is really several things: a basis for formal descriptions of
 application authentication protocols (what happens when), a pattern for
 actual programming APIs, a set of constraints and requirements for generic
 security mechanisms, and concrete programming APIs.
 Only the first of these is relevant to Internet application protocols.
\end_layout

\begin_layout Abstract
This document describes simplified and minimized profiles of the GSS-API
 for two purposes: explaining its use, whether in standards specifications
 or actual applications, and specifying sub-sets of the API for a) newcomers
 to the API, b) application developers that wish to use it but not have
 to link the whole thing into their applications.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
There has been some confusion in the Internet community as to the nature
 of the GSS-API.
 One problem that has been identified by some is that the GSS-API is quite
 large, that simpler subsets of it may be desirable.
 This document proposes some subsets and 
\begin_inset Quotes eld
\end_inset

profiles
\begin_inset Quotes erd
\end_inset

 of the GSS-API.
 We hope this will make the API more approachable, acceptable, and easier
 to understand.
\end_layout

\begin_layout Standard
The GSS-API is first and foremost an 
\emph on
abstract
\emph default
 API whose purpose is to describe with high precision how Internet application
 protocols handle user/service authentication and transport security.
\end_layout

\begin_layout Standard
The GSS-API is also a set of constraints on its security mechanisms.
\end_layout

\begin_layout Standard
The GSS-API is also a pattern for programming language bindings of the abstract
 GSS-API.
 In the IETF we have standardized C and Java bindings for the abstract API.
\end_layout

\begin_layout Standard
Note that there is 
\emph on
absolutely no requirement
\emph default
 that implementators use the C or Java, or any other bindings of the GSS-API
 to implement applications whose specifications use the 
\emph on
abstract
\emph default
 GSS-API.
 For example, one major implementor uses a different API (though in broad
 strokes quite similar to the GSS-API) to access generic security mechanisms,
 and applications using that API interoperate perfectly with applications
 that use bonafide GSS-API implementations.
\end_layout

\begin_layout Standard
By providing minimized profiles/subsets of the GSS-API we hope to make the
 GSS-API easier to use.
\end_layout

\begin_layout Subsection
A Brief Primer on the GSS-API
\end_layout

\begin_layout Standard
In GSS terminology we have:
\end_layout

\begin_layout Description
Principals Entities to be authenticated;
\end_layout

\begin_layout Description
Credentials Credentials are used to authenticate principals;
\end_layout

\begin_layout Description
Security
\begin_inset space ~
\end_inset

context
\begin_inset space ~
\end_inset

tokens Messages exchanged by two principals to authenticate one to the other
 (and possibly the other to the one);
\end_layout

\begin_layout Description
Security
\begin_inset space ~
\end_inset

contexts The shared state (e.g., session keys) that results from a successful
 exchange of security context tokens;
\end_layout

\begin_layout Description
Initiator The party (typically the client) that initiates a security context
 token exchange;
\end_layout

\begin_layout Description
Acceptor The party (typically the server) that receives an initial security
 context token.
\end_layout

\begin_layout Standard
The abstract API has a few data types:
\end_layout

\begin_layout Description
Buffers Octet strings;
\end_layout

\begin_layout Description
OIDs Constants identifying GSS mechanisms and name types;
\end_layout

\begin_layout Description
OID
\begin_inset space ~
\end_inset

sets Sets of OIDs;
\end_layout

\begin_layout Description
NAME Opaque object representing the name of a principal;
\end_layout

\begin_layout Description
CREDENTIAL
\begin_inset space ~
\end_inset

HANDLE Opaque object representing a credential for authenticating the entity
 that has access to it;
\end_layout

\begin_layout Description
SECURITY
\begin_inset space ~
\end_inset

CONTEXT
\begin_inset space ~
\end_inset

HANDLE Opaque object representing a security context.
\end_layout

\begin_layout Subsection
Conventions used in this document
\end_layout

\begin_layout Standard
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
 "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are
 to be interpreted as described in 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC2119
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Simple Profiles of the GSS-API
\end_layout

\begin_layout Standard
We define profiles of the GSS-API for a variety of applications.
 These can be used both, for application security protocol specifications,
 and for implementation (but the latter is never required).
\end_layout

\begin_layout Itemize
Trivial client (
\begin_inset Quotes eld
\end_inset

initiator
\begin_inset Quotes erd
\end_inset

) applications;
\end_layout

\begin_layout Itemize
Simple initiator applications;
\end_layout

\begin_layout Itemize
Various security layer options;
\end_layout

\begin_layout Itemize
Trivial server (
\begin_inset Quotes eld
\end_inset

acceptor
\begin_inset Quotes erd
\end_inset

) applications;
\end_layout

\begin_layout Itemize
Simple acceptor applications.
\end_layout

\begin_layout Standard
We also define C bindings for these profiles, as well as for specific additional
 subsets of GSS-API functionality.
 These will take the form of C pre-processor macros indicating what profiles
 and functionality subsets are available.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Trivial-Initiator"

\end_inset

Trivial Initiator (client) Application
\end_layout

\begin_layout Standard
This profile requires just six GSS-API functions, three of which are destructors
, and one of which is a function for formatting error strings:
\end_layout

\begin_layout Description
GSS_Import_name() Produces a NAME object given a string and a name type;
\end_layout

\begin_layout Description
GSS_Init_sec_context() Drives the exchange of security context tokens (authentic
ation messages) on the initiator side;
\end_layout

\begin_layout Description
GSS_Display_status() Produces a human-readable representation of a status
 code (error code);
\end_layout

\begin_layout Standard
destructor functions:
\end_layout

\begin_layout Itemize
GSS_Release_name()
\end_layout

\begin_layout Itemize
GSS_Release_buffer()
\end_layout

\begin_layout Itemize
GSS_Delete_sec_context()
\end_layout

\begin_layout Standard
The trivial initiator application profile REQUIRES two name-types: GSS_C_NT_HOST
BASED_SERVICE and GSS_C_NO_OID (denoting a mechanism-specific default name
 syntax).
\end_layout

\begin_layout Standard
A trivial initiator application begins by using GSS_Import_name() to get
 a NAME object for the target acceptor (server).
 This will be a host-based service name like 
\begin_inset Quotes eld
\end_inset

HTTP@hostname
\begin_inset Quotes erd
\end_inset

.
 The application then loops over GSS_Init_sec_context() to drive the exchange
 security context tokens (authentication messages) with the target.
\end_layout

\begin_layout Standard
Most input arguments to GSS_Init_sec_context() will be defaulted.
\end_layout

\begin_layout Standard
If a trivial initiator application has multiple initiator credentials to
 choose from then the choice of credential will be left to the GSS-API framework
 or security mechanism.
 GSS-API implementations SHOULD provide some facility for configuring reasonable
 initiator identity selection.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Simple-Initiator"

\end_inset

Simple Initiator Application
\end_layout

\begin_layout Standard
This profile adds two functions to the trivial initiator application profile,
 one of which is a destructor:
\end_layout

\begin_layout Description
GSS_Acquire_cred() Produces a CREDENTIAL HANDLE for a given desired NAME.
\end_layout

\begin_layout Standard
destructor function:
\end_layout

\begin_layout Itemize
GSS_Release_cred()
\end_layout

\begin_layout Standard
The initiator application may have multiple credentials and want to choose
 a specific one to authenticate as to a target.
 Such an application does so by calling GSS_Import_name() for the desired
 name, then GSS_Acquire_cred() to acquire a CREDENTIAL HANDLE to pass to
 GSS_Init_sec_context() as the initiator credential.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Trivial-Acceptor"

\end_inset

Trivial Acceptor (server) Application
\end_layout

\begin_layout Standard
This profile requires just eight GSS-API functions, three of which are destructo
rs, and one of which is a function for formatting error strings:
\end_layout

\begin_layout Description
GSS_Accept_sec_context() Driver of security context token exchange;
\end_layout

\begin_layout Description
GSS_Display_name_ext() Produces human-readable representation of a NAME
 object in the syntax of selected name type, if possible;
\end_layout

\begin_layout Description
GSS_Display_name() Produces a human-readable representation of a NAME object
 in a mechanism-specific syntax;
\end_layout

\begin_layout Description
GSS_Export_name() Produces a machine-readable representation of a NAME object
 in a mechanism-specific format;
\end_layout

\begin_layout Description
GSS_Display_status() Produces a human-readable representation of a status
 code (error code);
\end_layout

\begin_layout Standard
destructor functions:
\end_layout

\begin_layout Itemize
GSS_Release_name()
\end_layout

\begin_layout Itemize
GSS_Release_buffer()
\end_layout

\begin_layout Itemize
GSS_Delete_sec_context()
\end_layout

\begin_layout Standard
This profile REQUIRES one name-type: GSS_C_NT_USERNAME.
\end_layout

\begin_layout Standard
A trivial acceptor application begins by using GSS_Accept_sec_context()
 to drive an exchange of security context tokens by which to authenticate
 an initiator.
 A successful authentication will yield a NAME representing the identity
 of the initiator -- the acceptor will perform authorization based on the
 name of the initiator.
 The acceptor application MUST use one of GSS_Display_name_ext(), GSS_Display_na
me(), or GSS_Export_name() to obtain a textual or binary representation
 of the initiator name suitable for authorization.
\end_layout

\begin_layout Standard
Most input arguments to GSS_Accept_sec_context() will be defaulted.
\end_layout

\begin_layout Standard
If a trivial acceptor application has multiple acceptor credentials to choose
 from then the choice will be the initiator's.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Simple-Acceptor"

\end_inset

Simple Acceptor Application
\end_layout

\begin_layout Standard
This profile adds three functions to the trivial initiator application profile:
\end_layout

\begin_layout Description
GSS_Inquire_context() A simple acceptor application may be interested in
 knowing what name it was called by the initiator, and may do so by calling
 GSS_Inquire_context().
\end_layout

\begin_layout Description
GSS_Store_cred() A simple acceptor application may have a use for delegated
 credentials.
 This function makes it possible to make delegated credentials available
 to other applications.
\end_layout

\begin_layout Description
GSS_Release_cred() This is the destructor for the delegated CREDENTIAL HANDLE.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Transport-Security-Layer"

\end_inset

Transport Security Layer Profiles
\end_layout

\begin_layout Standard
Internet applications often require transport security -- integrity protection
 or integrity and confidentiality protection.
 In simpler terms: some applications require encryption.
\end_layout

\begin_layout Standard
The GSS-API was originally designed to provide facilities that the application
 could use to protect its in-flight data.
 Since then a number of options have been added to make it easier to use
 the GSS-API in existing applications that already have transport security
 facilities.
 The GSS-API now supports applications that use TLS for transport security,
 applications that have their own cryptographic transport protection facilities
 (like AFS' RX transport), as well as applications that can just use the
 original GSS-API transport security facilities.
\end_layout

\begin_layout Standard
It is now possible to retrofit the GSS-API for authentication (and, where
 required, key exchange) into the widest possible range of applications.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Null-Transport-Security"

\end_inset

Null Transport Security
\end_layout

\begin_layout Standard
In some environments strong authentication of users and services is sufficient,
 with no need to protect in-flight data from passive nor active attacks.
 The trivial and simple profiles of the GSS-API suffice for these applications.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:TLS-Name-Binding"

\end_inset

TLS with Server Name Binding
\end_layout

\begin_layout Standard
This profile adds not functions to any of the trivial and simple acceptor
 application profiles.
\end_layout

\begin_layout Standard
Applications using this profile use TLS 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC5246
\end_layout

\end_inset

 for transport security and the GSS-API for authentication.
 This profile REQUIRES that applications use the 'tls-server-end-point'
 channel binding type 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC5929
\end_layout

\end_inset

 a TLS server certificate to authenticate the server to the client and that
 the same server name used to authenticate the server in TLS also be used
 to authenticate the server in the GSS-API.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:TLS-CB"

\end_inset

TLS with Channel Binding
\end_layout

\begin_layout Standard
This profile adds no functions to any of the initiator or acceptor application
 profiles.
 Instead this profile makes support for channel binding 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC5056
\end_layout

\end_inset

 REQUIRED.
\end_layout

\begin_layout Standard
Applications using this profile use TLS 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC5246
\end_layout

\end_inset

 for transport security, possibly using anonymous Diffie-Hellman (DH) cipher
 suites.
 Channel binding ensures that the end-points of the TLS connection are logically
 the same as the GSS-API end-points, thus ensuring that there are no men
 in the middle (MITMs) even if anonymous DH TLS cipher suites are used.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Per-msg-tokens"

\end_inset

Per-Message Tokens
\end_layout

\begin_layout Standard
This profile adds four functions to the simple initiator application profile:
\end_layout

\begin_layout Description
GSS_GetMIC() Get an authentication code for a message (something like a
 MAC);
\end_layout

\begin_layout Description
GSS_VerifyMIC() Verify an authentication code sent by the peer;
\end_layout

\begin_layout Description
GSS_Wrap() Wrap an application message, typically to provide confidentiality
 and integrity protection (i.e., encrypt with authentication);
\end_layout

\begin_layout Description
GSS_Unwrap() Unwrap a wrapped application message (i.e., decrypt with authenticati
on).
\end_layout

\begin_layout Standard
An application of this type will rely on the GSS-API security mechanism
 to provide confidentiality and/or integrity protection to the application's
 messages.
 This kind of application typically does not use TLS or any other framework
 for transport security.
\end_layout

\begin_layout Standard
Applications may use these functions to implement either of octet streams
 and unsequenced datagram security layers.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:PRF"

\end_inset

GSS-Keyed Application Transport Security Layer
\end_layout

\begin_layout Standard
This profile adds one function to the simple initiator application profile:
\end_layout

\begin_layout Description
GSS_Pseudo_random() Get a pseudo-random output octet string based on session
 keys exchanged by the GSS-API security mechanism and an input octet string
 provided by the application.
\end_layout

\begin_layout Standard
An application of this type typically has its own transport security layer
 (i.e., does its own encryption) and only requires a session key, which it
 can get from the GSS-API security context by using the GSS_Pseudo_random()
 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC4401
\end_layout

\end_inset

 function to obtain an octet string of suitable length.
\end_layout

\begin_layout Section
Complex Profiles
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Complex-Initiator-Application"

\end_inset

Advanced Initiator Application
\end_layout

\begin_layout Standard
A complex initiator application requires most of the functions defined in
 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC5587
\end_layout

\end_inset

 in addition to those of the simple initiator application profile:
\end_layout

\begin_layout Description
GSS_Indicate_mechs_by_attrs() Select mechanisms based on desired attributes;
\end_layout

\begin_layout Description
GSS_Inquire_attrs_for_mech() Get the set of attributes of a given mechanism.
\end_layout

\begin_layout Standard
These functions are useful for mechanism negotiation.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Complex-Acceptor-Application"

\end_inset

Advanced Acceptor Application
\end_layout

\begin_layout Standard
A complex acceptor application typically requires fine-grained access to
 the initiator names so as to implement more advanced authorization schemes.
 This means all of the naming extensions APIs:
\end_layout

\begin_layout Description
GSS_Display_name_ext() Already covered in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Trivial-Acceptor"

\end_inset

.
\end_layout

\begin_layout Description
GSS_Inquire_name() Needed to list attributes available in the initiator
 name.
\end_layout

\begin_layout Description
GSS_Get_name_attribute() Needed to access individual attributes of the initiator
 name.
\end_layout

\begin_layout Description
GSS_Export_name_composite() Needed to be able to save a binary version of
 the initiator name with all its attributes.
\end_layout

\begin_layout Standard
Complex acceptor applications may also need at least one extended mechanism
 inquiry function 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC5587
\end_layout

\end_inset

:
\end_layout

\begin_layout Description
GSS_Inquire_attrs_for_mech() Get the set of attributes of a given mechanism.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:identifiers"

\end_inset

GSS-API Profile and Subset Identifiers
\end_layout

\begin_layout Standard
We define identifiers for GSS-API profiles and subsets.
 These should be used as follows:
\end_layout

\begin_layout Itemize
Internet application specifications using the GSS-API must list the profiles/sub
sets of the API required to implement the specification;
\end_layout

\begin_layout Itemize
GSS-API implementations SHOULD use these identifiers to advertise which
 profiles/subsets of the API are available
\end_layout

\begin_layout Itemize
GSS-API application implementations using the GSS-API in the implementation
 SHOULD use these identifiers to request profiles/subsets of the API to
 use.
\end_layout

\begin_layout Standard
The identifiers are:
\end_layout

\begin_layout Description
GSS_PR_V2U1 This refers to the base GSS-API version 2 update 1.
\end_layout

\begin_layout Description
GSS_PR_TRIVIAL_INITIATOR See 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Trivial-Initiator"

\end_inset

.
\end_layout

\begin_layout Description
GSS_PR_SIMPLE_INITIATOR See 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Simple-Initiator"

\end_inset

.
\end_layout

\begin_layout Description
GSS_PR_TRIVIAL_ACCEPTOR See 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Trivial-Acceptor"

\end_inset

.
\end_layout

\begin_layout Description
GSS_PR_SIMPLE_ACCEPTOR See 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Simple-Acceptor"

\end_inset

.
\end_layout

\begin_layout Description
GSS_PR_ADVANCED_INITIATOR See 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Complex-Initiator-Application"

\end_inset

.
\end_layout

\begin_layout Description
GSS_PR_ADVANCED_ACCEPTOR See 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Complex-Acceptor-Application"

\end_inset

.
\end_layout

\begin_layout Description
GSS_PR_CB See 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:TLS-CB"

\end_inset

.
\end_layout

\begin_layout Description
GSS_PR_MSG_TOKENS See 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Per-msg-tokens"

\end_inset

.
\end_layout

\begin_layout Description
GSS_PR_PRF See 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:PRF"

\end_inset


\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC4401
\end_layout

\end_inset

.
\end_layout

\begin_layout Description
GSS_PR_STORE_CRED See 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Simple-Acceptor"

\end_inset

 and 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC5588
\end_layout

\end_inset


\end_layout

\begin_layout Description
GSS_PR_EXTENDED_MECH_INQUIRY Functions from 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC5587
\end_layout

\end_inset


\end_layout

\begin_layout Description
GSS_PR_EXTENDED_NAMING Functions from 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC6680
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
C-Bindings
\end_layout

\begin_layout Standard
C pre-processor macros MUST be defined by <gssapi.h> or <gssapi/gssapi.h>
 for each of the supported profiles and subsets of the GSS-API supported
 by the GSS-API implementation.
 The C pre-processor macro names MUST be as given in the preceding section,
 and the value should be 1 if the macro is defined.
\end_layout

\begin_layout Section
Mechanism Profiles
\end_layout

\begin_layout Standard
A mechanism profile is a set of GSS-API mechanisms that MUST be provided.
\end_layout

\begin_layout Subsection
Intranet Profile: SPNEGO, Kerberos
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
Internet Profile: SPNEGO, <TBD>
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Section
Minimized GSS-API Implementations
\end_layout

\begin_layout Standard
Typically a GSS-API implementation includes all of the basic version 2,
 update 1 API 
\begin_inset Flex EntityXRef
status open

\begin_layout Plain Layout
RFC2743
\end_layout

\end_inset

.
 For embedded and mobile applications it may be desirable to have minimized
 GSS-API implementations, both for the framework itself and the mechanisms.
 A minimized implementation should provide at least the functionality required
 by the application and, preferably, no more than is required by the application.
 In practice this may mean that a complete implementation may have to provide
 tools for reducing the functionality provided.
\end_layout

\begin_layout Standard
One possibility may be to implement a system whereby all the sources for
 a C implementation are combined into a single file and then C pre-processing
 can be used to eliminate all functionality that is not desired, then the
 resulting object file is linked into the application.
 This is known by some as an 
\begin_inset Quotes eld
\end_inset

amalgamation
\begin_inset Quotes erd
\end_inset

, and is much like static linking, but can be significantly more selective.
 This approach is used by SQLite3, for example.
\end_layout

\begin_layout Standard
Another possibility is to structure the framework library and the mechanism
 plugins such that subsets are in distinct static linking archives or shared
 objects.
 This approach may result in a multiplicity of libraries and/or packages
 that reflect the profiles of the GSS-API.
\end_layout

\begin_layout Standard
For minimization we recommend either the amalgamation approach or a scheme
 whereby static linking archives are used.
 For general purpose use we recommend dynamic linking and no minimization.
\end_layout

\begin_layout Section
IANA Considerations
\end_layout

\begin_layout Standard
We ask the IANA to create a registry of GSS-API profiles and subsets, with
 the identifiers list from of 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:identifiers"

\end_inset

 as its contents.
\end_layout

\begin_layout Section
Security Considerations
\end_layout

\begin_layout Standard
The security considerations of the GSS-API version 2, update 1, and its
 various extensions apply.
 Using too trivial a profile for an application can have security impact.
 For example, applications using the trivial initiator application profile
 (GSS_PR_TRIVIAL_INITIATOR) cannot select an initiator identity and depend
 entirely on the framework and/or selected mechanism for this.
\end_layout

\begin_layout Standard
Internet applications that use GSS mechanisms should specify one of th transport
 security layers from 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Transport-Security-Layer"

\end_inset

 other than the null layer as required to implement.
 The simplest transport security layer is, of course, none at all (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Null-Transport-Security"

\end_inset

), but this is not secure in the Internet threat model; all the other options
 listed in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Transport-Security-Layer"

\end_inset

 offer good security in the Internet threat model.
 The next simplest may well be to use TLS with server name binding (see
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:TLS-Name-Binding"

\end_inset

).
\end_layout

\begin_layout Section
Informative References
\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc2119"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc5246"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc5056"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5056.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc5929"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5929.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc2743"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2743.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc5587"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5587.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc6680"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6680.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc5588"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5588.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc4401"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4401.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
