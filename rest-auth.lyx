#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass docbook
\use_default_options true
\maintain_unincluded_children false
\begin_local_layout
Format 31

InsetLayout Flex:PI_Strict
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:PI
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:PI_SymRefs
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:PI_SortRefs
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:PI_TOC
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:PI_TOCIndent
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:PI_TOCDepth
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:PI_TOCNarrow
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:PI_TOCCompact
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:PI_TOCAppendix
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:DocName
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:IntendedStatus
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:RFCNumber
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:IPR
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:IETFArea
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:IETFWorkingGroup
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:XML2RFCKeyword
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:TitleAbbrev
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:AuthorRole
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:AuthorInitials
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:AuthorSurname
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:AuthorOrg
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:AuthorOrgAbbrev
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:AuthorEmailAddr
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:AuthorAddrStreet
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:AuthorAddrCity
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:AuthorAddrRegion
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:AuthorAddrCode
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:AuthorAddrCountry
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:EntityXRef
    LyXType Custom
    HTMLTag div
End

InsetLayout Flex:BibXML
    LyXType Custom
    HTMLTag div
End
\end_local_layout
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman cmr
\font_sans cmss
\font_typewriter cmtt
\font_default_family ttdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
RESTful Authentication Pattern for the Hypertext Transport Protocol (HTTP)
\end_layout

\begin_layout Standard
\begin_inset Flex DocName
status collapsed

\begin_layout Plain Layout
draft-williams-http-rest-auth-01
\end_layout

\end_inset


\begin_inset Flex IPR
status collapsed

\begin_layout Plain Layout
trust200902
\end_layout

\end_inset


\begin_inset Flex IntendedStatus
status collapsed

\begin_layout Plain Layout
info
\end_layout

\end_inset


\begin_inset Flex TitleAbbrev
status collapsed

\begin_layout Plain Layout
RESTful Authentication
\end_layout

\end_inset


\begin_inset Flex IETFArea
status collapsed

\begin_layout Plain Layout
Security Area
\end_layout

\end_inset


\begin_inset Flex XML2RFCKeyword
status collapsed

\begin_layout Plain Layout
Internet-Draft
\end_layout

\end_inset


\begin_inset Flex PI
status collapsed

\begin_layout Plain Layout
tocindent="no"
\end_layout

\end_inset


\begin_inset Flex PI
status collapsed

\begin_layout Plain Layout
comments="yes"
\end_layout

\end_inset


\begin_inset Flex PI
status collapsed

\begin_layout Plain Layout
inline="yes"
\end_layout

\end_inset


\end_layout

\begin_layout Author
Nicolas Williams
\begin_inset Flex AuthorOrg
status collapsed

\begin_layout Plain Layout
Cryptonector, LLC
\end_layout

\end_inset


\begin_inset Flex AuthorOrgAbbrev
status collapsed

\begin_layout Plain Layout
Cryptonector
\end_layout

\end_inset


\begin_inset Flex AuthorEmailAddr
status collapsed

\begin_layout Plain Layout
nico@cryptonector.com
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
This document proposes a 
\begin_inset Quotes eld
\end_inset

RESTful
\begin_inset Quotes erd
\end_inset

 pattern of authentication for HTTP/1.0, 1.1, and 2.0.
 The existing 401 status code and WWW-Authenticate header are used to indicate
 that authentication is required and for negotiation purposes.
 The client POSTs an initial authentication message to an indicated login
 URI, and reply messages are returned as new representations of a session
 resource named by a session URI.
\end_layout

\begin_layout Abstract
This approach has a number of benefits: it can be implemented with or without
 help from the HTTP stack, it can be universally implemented on the server
 side using the Common Information Gateway (CGI) and FastCGI, it results
 in a session Uniform Resource Identifier (URI) that can be DELETEd to logout,
 it is completely orthogonal to any HTTP 
\begin_inset Quotes eld
\end_inset

routers
\begin_inset Quotes erd
\end_inset

 and proxies, and it naturally (i.e., without changing HTTP) handles multi-legged
 authentication mechanisms.
\end_layout

\begin_layout Abstract
Among other features supported are: channel binding, an optional round trip
 optimization for challenge/response mechanisms, some cryptographic protection
 options for clients that don't use Transport Layer Security (TLS), stronger
 authentication of servers/services to users (where authentication mechanisms
 provide that) and more.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Introduction"

\end_inset

Introduction
\end_layout

\begin_layout Standard
We propose a pattern for HTTP 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC2616
\end_layout

\end_inset

 [XXX add reference to HTTP/2.0 as well] authentication mechanisms that,
 by being 
\begin_inset Quotes eld
\end_inset

RESTful
\begin_inset Quotes erd
\end_inset

, obtains a number of benefits:
\end_layout

\begin_layout Itemize
compatibility with 
\begin_inset Quotes eld
\end_inset

HTTP routing
\begin_inset Quotes erd
\end_inset

 by making no assumptions that related requests are sent over the same TCP/TLS
 connection;
\end_layout

\begin_layout Itemize
a 
\begin_inset Quotes eld
\end_inset

session URI
\begin_inset Quotes erd
\end_inset

 results that can be used to multiplex multiple sessions onto the same TCP/TLS
 connections;
\end_layout

\begin_layout Itemize
a 
\begin_inset Quotes eld
\end_inset

session URI
\begin_inset Quotes erd
\end_inset

 results that can be DELETEd to effect logout;
\end_layout

\begin_layout Itemize
a 
\begin_inset Quotes eld
\end_inset

session URI
\begin_inset Quotes erd
\end_inset

 results that has better security semantics than web cookies;
\end_layout

\begin_layout Itemize
the ability to refer to multiple sessions in one request wherever such a
 concept might be useful;
\end_layout

\begin_layout Itemize
can be implemented by any application without changes being required to
 any HTTP stack;
\end_layout

\begin_layout Itemize
can be implemented by the HTTP stack;
\end_layout

\begin_layout Itemize
on the server side this can be implemented entirely via CGI and FastCGI;
\end_layout

\begin_layout Itemize
by its RESTful nature, multi-legged authentication message exchanges are
 naturally handled without making any changes to HTTP.
\end_layout

\begin_layout Standard
There are probably other benefits not listed above.
\end_layout

\begin_layout Standard
The rough outline of the protocol is quite simple: initial authentication
 messages are POSTed to an agreed-upon or indicated resource, which then
 results in a new resource being created with the authentication reply message
 as the new resource's representation.
 Thereafter any additional authentication message exchanges needed (for
 multi-legged mechanisms) are POSTed to the new resource without a new resource
 being created.
 The resource created by the POSTing of the initial authentication mechanism
 identifies the resulting session, and its URI is known as the session URI.
 Session URIs can be used to multiplex multiple sessions over the same TCP/TLS
 connections, implement logout, and share sessions across multiple related
 servers.
\end_layout

\begin_layout Standard
Server-initiated authentication is also possible, whereby the server sends
 a challenge (not much else can be sent of value in an initial authentication
 message from the server besides a challenge, negotiation parameters, and,
 perhaps, a digital signature) in 401 errors in headers.
 If the server gives the client has a choice of mechanisms and the client
 picks one where the server sent the initial authentication message, then
 the client consumes that message and POSTs subsequent ones to the agreed
 URI.
\end_layout

\begin_layout Standard
This document replaces 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Bibliography
I-D.williams-rest-gss
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Conventions used in this document
\end_layout

\begin_layout Standard
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
 "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are
 to be interpreted as described in 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC2119
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Protocol"

\end_inset

Protocol
\end_layout

\begin_layout Standard
The are very few normative protocol elements here besides the outline given
 in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Introduction"

\end_inset

.
 The normative protocol elements are:
\end_layout

\begin_layout Itemize
the form of the WWW-Authenticate header values for RESTauth mechanisms;
\end_layout

\begin_layout Itemize
several new headers for advertising negotiable parameters that are orthogonal
 to WWW-Authenticate;
\end_layout

\begin_layout Itemize
the POSTing of authentication messages from the client, with the initial
 client authentication message going to either a pre-agreed URI or to a
 URI named in the WWW-Authenticate headers;
\end_layout

\begin_layout Itemize
the creation of a session URI as a result of the initial POST, and the subsequen
t POSTing of any additional authentication messages to the session URI;
\end_layout

\begin_layout Itemize
the new session URI resource representation resulting from POSTs being the
 server's response authentication message, if any;
\end_layout

\begin_layout Itemize
the DELETEion of session URIs as signaling logout;
\end_layout

\begin_layout Itemize
a new header for referencing session URIs in normal HTTP requests;
\end_layout

\begin_layout Itemize
the use of channel binding 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC5056
\end_layout

\end_inset

 to TLS 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC5246
\end_layout

\end_inset

 for session protection;
\end_layout

\begin_layout Itemize
the use of session keys as an option for integrity protection when TLS is
 not used.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Negotiable-Parameters"

\end_inset

Negotiable Parameters
\end_layout

\begin_layout Standard
As can be seen in the ABNF in the preceding section, the server can offer
 some negotiable parameters.
 These are:
\end_layout

\begin_layout Itemize
Mechanism names;
\end_layout

\begin_layout Itemize
Channel binding types;
\end_layout

\begin_layout Itemize
Session binding types;
\end_layout

\begin_layout Itemize
Replay protection;
\end_layout

\begin_layout Standard
Each WWW-Authenticate header value offers a single mechanism and negotiable
 parameters for it.
 The WWW-ChannelBinding-Types header allows the server to offer channel
 binding types.
\end_layout

\begin_layout Subsubsection
Strong Binding to TLS
\end_layout

\begin_layout Standard
Strong binding to TLS is provided via channel binding 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC5056
\end_layout

\end_inset

.
 When a RESTauth mechanism provides strong authentication of the service
 to the user, the combination of RESTauth and channel binding results in
 strong authentication of the server to the user even though TLS is used
 for session transport protection.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:WWW-Authenticate-Header-Value"

\end_inset

WWW-Authenticate Header Value Prefix Syntax
\end_layout

\begin_layout Standard
The ABNF for RESTauth WWW-Authenticate header values is as follows:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

      challenge           = ( "RA-" mechname SP restauth-challenge )
\end_layout

\begin_layout Plain Layout

      mechname            = TBD
\end_layout

\begin_layout Plain Layout

      restauth-challenge  = ( login-uri SP session-types SP
\end_layout

\begin_layout Plain Layout

                              replay-prot SP *1(mech-challenge) )
\end_layout

\begin_layout Plain Layout

      login-uri           = absoluteURI
\end_layout

\begin_layout Plain Layout

      session-types       = "s=" session-type /
\end_layout

\begin_layout Plain Layout

                            (session-type ":" session-types)
\end_layout

\begin_layout Plain Layout

      session-type        = "cookie" / "session-ID" / "MAC"
\end_layout

\begin_layout Plain Layout

      replay-prot         = "r=" ("yes" / "no")
\end_layout

\begin_layout Plain Layout

      ; TODO: add production for
\end_layout

\begin_layout Plain Layout

      ;       mech-challenge as a base64 string
\end_layout

\begin_layout Plain Layout

      ; TODO: add MAC algorithm offers for alg agility
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:WWW-Authenticate-ABNF"

\end_inset

WWW-Authenticate ABNF
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
For a DIGEST-like mechanism it might look like 
\begin_inset Quotes eld
\end_inset

WWW-Authenticate: RA-Digest-SHA-256 tls-server-end-point session-ID no HE4SgWGrd
/3+O7t16HqusA==
\begin_inset Quotes erd
\end_inset

.
 For example, the mechname for the Kerberos V5 GSS-API mechanism might be
 
\begin_inset Quotes eld
\end_inset

gss-krb5
\begin_inset Quotes erd
\end_inset

, and a WWW-Authenticate header value for it might look like 
\begin_inset Quotes eld
\end_inset

WWW-Authenticate: RA-gss-krb5 http://foo.example/restauth-login tls-server-end-po
int session-ID no
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Note that mechanisms that may be used include: GSS mechanisms, SASL mechanisms,
 ad-hoc mechanisms, and so on.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:WWW-ChannelBinding-Types-Header"

\end_inset

WWW-ChannelBinding-Types Header
\end_layout

\begin_layout Standard
A new header is added by which servers MUST indicate which channel binding
 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC5056
\end_layout

\end_inset

 types -if any- they support for RESTauth authentication; if the server
 does not support channel binding then this header MUST be absent.
 The header is named WWW-ChannelBinding-Types.
 Its values are channel binding types from the channel binding type registry
 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC5929
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:WWW-ChannelBinding-Type-Header"

\end_inset

WWW-ChannelBinding-Type Header
\end_layout

\begin_layout Standard
A new header is added by which clients MUST indicate what channel binding
 type they used when POSTing RESTauth authentication messages, if any; if
 the client did not use channel binding then this header MUST be absent.
 The header is named WWW-ChannelBinding-Type.
 Its value is a channel binding type from the channel binding type registry
 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC5929
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:WWW-SessionType-Header"

\end_inset

WWW-SessionType Header
\end_layout

\begin_layout Standard
A new header is added by which clients MUST indicate what session binding
 type they choose when POSTing RESTauth authentication messages.
 The header is named WWW-SessionBinding-Type.
 Its value is a session binding type as shown in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:WWW-Authenticate-ABNF"

\end_inset

.
 This header MUST be present in RESTauth authentication HTTP requests.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:WWW-ReplayProtection-Header"

\end_inset

WWW-ReplayProtection Header
\end_layout

\begin_layout Standard
A new header is added by which clients MUST indicate whether they desire
 replay protection when POSTing RESTauth authentication messages.
 The header is named WWW-SessionBinding-Type.
 Its value is 
\begin_inset Quotes eld
\end_inset

yes
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

no
\begin_inset Quotes erd
\end_inset

 (defaults to 
\begin_inset Quotes eld
\end_inset

no
\begin_inset Quotes erd
\end_inset

 if absent) as shown in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:WWW-Authenticate-ABNF"

\end_inset

.
\end_layout

\begin_layout Standard
Replay protection is to be used only when TLS 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC5246
\end_layout

\end_inset

 is not, and only if a session binding type of 
\begin_inset Quotes eld
\end_inset

MAC
\begin_inset Quotes erd
\end_inset

 is also requested.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Protocol-Flow"

\end_inset

Protocol Flow
\end_layout

\begin_layout Standard
RESTauth can be initiated by a client that knows a priori that it needs
 to or wants to use RESTauth.
 Servers can also tell clients that access to certain resources require
 authentication, possibly including RESTauth mechanisms.
 When the server tells the client that it must authenticate the server may
 also give the client an initial authentication message for one or more
 mechanisms.
\end_layout

\begin_layout Standard
When the client knows a priori that it must authenticate then the client
 MUST know the RESTauth login URI a priori as well, as well as negotiable
 parameters, all of which the client might know from either an application
 protocol specification, or from caching this information from earlier RESTauth
 exchanges.
\end_layout

\begin_layout Standard
The server MUST use a 401 HTTP status code and WWW-Authenticate headers
 to inform the client of the need to authenticate in order to access a given
 resource.
 For RESTauth mechanisms the WWW-Authenticate header values MUST conform
 to the ABNF given in 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:WWW-Authenticate-Header-Value"

\end_inset

.
\end_layout

\begin_layout Standard
To proceed the client chooses a suitable authentication mechanism (for which,
 presumably, it has credentials for a desired client identity), possibly
 a channel binding type, possibly a session type, and whether to use replay
 protection.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:One-Round-Trip"

\end_inset

One Round Trip Optimization: Challenges Born in WWW-Authenticate Headers
\end_layout

\begin_layout Standard
Some mechanisms may optimize the protocol flow by allowing the server to
 include challenges in the 401 response's WWW-Authenticate header values.
 RESTauth allows this, but this feature is OPTIONAL: it must always be possible
 for a client to initiate RESTauth without first obtaining a challenge in
 a WWW-Authenticate header value, in which case the client must incur an
 extra protocol leg by obtaining the challenge (if it is at all necessary)
 in the server's reply to the client's first authentication message.
 The reason that this optimization is optional is to allow the implementation
 of RESTauth mechanisms with frameworks that only support client-initiated
 authentication.
\end_layout

\begin_layout Standard
A challenge may consist of a nonce, some encrypted or MACed nonce, a time-stamp,
 and even seemingly unrelated contents such as certificates and digital
 signatures.
 The server MAY include a login URI in challenge-laden WWW-Authenticate
 headers where the login URI encodes secure state regarding the challenge.
 
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Session-Binding-Types:"

\end_inset

Session Binding Types: Cookie, URI, and MAC
\end_layout

\begin_layout Standard
A notion of session binding type is added for binding HTTP requests to specific
 RESTauth login sessions.
 Three types are provided:
\end_layout

\begin_layout Description
Cookies The traditional web cookie approach to session binding;
\end_layout

\begin_layout Description
Session
\begin_inset space ~
\end_inset

URI HTTP requests carry a WWW-Session-URI header identifying the session(s)
 (similar to cookies, but without all the associated baggage);
\end_layout

\begin_layout Description
MAC HTTP requests carry a WWW-Session-URI header identifying the session(s)
 and a WWW-Session-MAC header that carries a MAC or MACs binding the session
 URI(s) to the request.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:The-New-WWW-Session-URI"

\end_inset

The New WWW-Session-URI Header
\end_layout

\begin_layout Standard
A new HTTP header is added called WWW-Session-URI whose values consist of
 session URIs.
 At least one session URI MUST be included.
 Each session URI is an absoluteURI.
 Session URIs MUST NOT have unescaped commas (',') embedded in them.
 Servers MAY fail to implement support for multiple session URIs being reference
d by a single request, in which case they MUST answer with error code <TBD>.
 Servers MUST validate the session URI before processing the request; if
 the session URI is invalid the server MUST respond with a 401 (or TBD?)
 status code.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:The-New-WWW-Session-MAC"

\end_inset

The New WWW-Session-MAC Header
\end_layout

\begin_layout RevisionRemark
Describe the header, its values, algorithm agility, and what the MAC is
 to be taken over.
 Note too that this cannot apply to request contents as we have to consider
 chunking, and besides, a MAC of contents really has to go as a trailer,
 not a header.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:A-MAC-Trailer??"

\end_inset

A MAC Trailer??
\end_layout

\begin_layout RevisionRemark
...
 This is only needed for RESTauth 
\emph on
without
\emph default
 TLS, which will probably not be the common mode of use for RESTauth...
 unless we can produce a MAC trailer extension for HTTP/2.0, in which case
 this may well become a common mode of RESTauth usage.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:HTTP-Routing-and"

\end_inset

HTTP 
\begin_inset Quotes eld
\end_inset

Routing
\begin_inset Quotes erd
\end_inset

 and RESTauth
\end_layout

\begin_layout Standard
It is common to deploy HTTP services with load-balanced servers behind a
 load balancer and TLS concentrator.
 Other techniques may also result in a multiplicity of servers acting on
 behalf of a single service.
 The load balancers may even behave like routers and route HTTP requests
 to the same server for all requests in a single connection, or even route
 HTTP requests according to the verb and resource.
 It helps to be able to have a notion of authenticated sessions that can
 be referenced by all servers responding to a given service name.
\end_layout

\begin_layout Standard
The server end of a RESTauth authentication message exchange may be terminated
 by one server, by many servers sharing session state (via the resources
 named by session URIs), or by a server-side HTTP router.
 Once a RESTauth session is established we assume that all servers responding
 to the same service name will be able to access the session resource, validate
 session URIs, and obtain keys for computing and validating session binding
 MACs.
 Alternatively, the router may take responsibility for session binding and
 signal authorization information from the established session to the HTTP
 servers behind the router (however, we do not here specify any methods
 for such signaling).
\end_layout

\begin_layout Standard
By using REST for the authentication message exchange we allow this disconnectio
n between 
\begin_inset Quotes eld
\end_inset

session
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

connection
\begin_inset Quotes erd
\end_inset

, which therefore facilitates 
\begin_inset Quotes eld
\end_inset

routing
\begin_inset Quotes erd
\end_inset

 of HTTP requests and even off-loading of authentication and/or session
 binding to HTTP 
\begin_inset Quotes eld
\end_inset

routers
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
This approach should be flexible enough for all existing architectures for
 deploying HTTP services.
\end_layout

\begin_layout Section
In-band HTTP Authentication Alternatives
\end_layout

\begin_layout Standard
RESTauth is 
\begin_inset Quotes eld
\end_inset

out-of-band
\begin_inset Quotes erd
\end_inset

 in the sense that the authentication messages are exchanged independently
 of the application's requests for normal resources.
 Of course, RESTauth exchanges may well (and often will) happen in the same
 TCP/TLS connection as normal application requests, so RESTauth is not really
 out-of-band.
 We use 
\begin_inset Quotes eld
\end_inset

out-of-band
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

in-band
\begin_inset Quotes erd
\end_inset

 very loosely in this section.
\end_layout

\begin_layout Standard
There exist several 
\begin_inset Quotes eld
\end_inset

in-band
\begin_inset Quotes erd
\end_inset

 HTTP authentication alternatives where the authentication message exchanges
 happen in the context of application resources.
 Here the HTTP verb and resource are application-specific and have nothing
 to do with authentication, and the authentication messages are exchanged
 via HTTP request and response headers with the server responding with a
 401 status code until authentication is complete.
\end_layout

\begin_layout Standard
The extant 
\begin_inset Quotes eld
\end_inset

Basic
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

DIGEST-MD5
\begin_inset Quotes erd
\end_inset

 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC2617
\end_layout

\end_inset

 HTTP authentication methods, as well as HTTP/Negotiate 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC4559
\end_layout

\end_inset

 are 
\begin_inset Quotes eld
\end_inset

in-band
\begin_inset Quotes erd
\end_inset

 HTTP authentication methods.
\end_layout

\begin_layout Standard
In so far as an in-band authentication method results in a web cookie or
 session URI/ID the distinction between in-band and out-of-band is almost
 trivial, as described above: authentication messages in headers vs.
 bodies, and HTTP verb and URL.
 However, if in-line authentication methods are strongly tied to the TCP/TLS
 connections over which they were utilized then that is a big disadvantage
 over RESTauth: each connection requires re-authenticating, and support
 for HTTP routing schemes is not clear.
\end_layout

\begin_layout Standard
HTTP/Negotiate is more troublesome because historically it has required
 re-authentication per-HTTP request(!).
\end_layout

\begin_layout Standard
Even if the only difference between in-band and out-of-band is a trivial
 one, using the REST pattern means that authentication can be implemented
 using with no help from the HTTP stack (even though it's desirable to have
 it implemented within/by the HTTP stack), whereas there may not be a way
 to implement in-band authentication without help from the HTTP stack for
 some stacks.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Sample/Potential-RESTauth-Authen"

\end_inset

Sample/Potential RESTauth Authentication Mechanisms
\end_layout

\begin_layout Standard
Here we describe (informatively, for now) how to use or adapt a variety
 of authentication mechanisms, from SSHv2, IKEv2, SASL, GSS-API, and other
 frameworks, so as to quickly gain a set of usable mechanisms, both, specificati
on- and implementation-wise.
 This section is also intended to show that adding RESTauth mechanisms is
 easy.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Adapting-SSHv2-Authentication"

\end_inset

Adapting SSHv2 Authentication Mechanisms to RESTauth
\end_layout

\begin_layout Standard
SSHv2 
\begin_inset Quotes eld
\end_inset

userauth
\begin_inset Quotes erd
\end_inset

 mechanisms 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC4252
\end_layout

\end_inset

 typically involve a digital signature (or similar) of an SSHv2 session
 ID.
 There is no such thing as an SSHv2 session ID in HTTP.
 A session URI cannot serve as a stand-in for an SSHv2 session ID because
 a) the session URI is an outcome of authentication in RESTauth, b) to prevent
 cut-n-paste and replay attacks the client and the server both must contribute
 to the entropy of the session ID that is signed by the client.
\end_layout

\begin_layout Standard
In order to adapt SSHv2 userauth methods properly (i.e., securely), we have
 replace the SSHv2 session ID in the to-be-signed data with a hash of the
 channel binding and nonces contributed by the client and the server.
 As an optimization the server nonce can be sent as a challenge (this saves
 a round trip).
\end_layout

\begin_layout Subsubsection
RESTauth Mechanism Names for SSHv2 Userauth Methods
\end_layout

\begin_layout Standard
For hash agility reasons the hash function name is part of the SSHv2 RESTauth
 mechanism name.
 To avoid 
\begin_inset Quotes eld
\end_inset

multi-level negotiation
\begin_inset Quotes erd
\end_inset

 the SSHv2 userauth method name is also part of the RESTauth mechanism name.
\end_layout

\begin_layout Standard
The RESTauth mechanism name form for SSHv2 userauth methods, then, is: ssh-<SSHv
2-userauth-method-name>-<hash-function-name>.
\end_layout

\begin_layout Standard
The following RESTauth mechanisms are defined here:
\end_layout

\begin_layout Itemize
ssh-publickey-SHA-256
\end_layout

\begin_layout Itemize
ssh-hostbased-SHA-256
\end_layout

\begin_layout Subsubsection
Nonces
\end_layout

\begin_layout Standard
The client and the server must each contribute 128-bit nonces.
\end_layout

\begin_layout Subsubsection
\begin_inset Quotes eld
\end_inset

Session ID
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
The ssh-publickey-SHA-256 and ssh-hostbased-SHA-256 mechanisms use the following
 instead of a traditional SSHv2 session ID:
\end_layout

\begin_layout Itemize
SHA-256((client_nonce XOR server_nonce) || channel_binding)
\end_layout

\begin_layout Standard
Here the <channel_binding> is as per-
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC5056
\end_layout

\end_inset

: the channel binding type name, followed by the channel binding data (e.g.,
 'tls-server-end-point' followed by the server EE certificate as sent in
 the server's TLS Certificate message).
\end_layout

\begin_layout Standard
Note that use of channel binding when using SSHv2 mechanisms is REQUIRED
 so as to defeat cut-n-paste attacks by weakly-authenticated servers.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Adapting-IKEv2-Authentication"

\end_inset

Adapting IKEv2 Authentication Mechanisms to RESTauth
\end_layout

\begin_layout RevisionRemark
TBD.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Adaptinve-IKEv2-Password"

\end_inset

Adapting IKEv2 Password Authenticated Connection Establishment (PACE) to
 RESTauth
\end_layout

\begin_layout RevisionRemark
TBD.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Using-SASL-Authentication"

\end_inset

Using SASL Authentication Mechanisms with RESTauth
\end_layout

\begin_layout Standard
Simple Authentication and Security Layers (SASL) 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC4422
\end_layout

\end_inset

 is a simple, pluggable framework for authentication mechanisms.
\end_layout

\begin_layout Standard
To use a SASL mechanism in RESTauth just prefix 
\begin_inset Quotes eld
\end_inset

SA-
\begin_inset Quotes erd
\end_inset

 to the SASL mechanism name and use that as the RESTauth mechanism name.
 If the SASL mechanism is server-initiated then the server's challenge is
 sent in the server's WWW-Authenticate header value as described above.
 All other SASL authentication messages are exchanged as described above
 (i.e., via POSTs, first to the login URI, then to the session URI, with response
 messages as the new representation of the session resource).
\end_layout

\begin_layout Standard
The HTTP status code functions as the application's outcome of authentication
 message.
\end_layout

\begin_layout Standard
The server's WWW-Authenticate header values function as the mechanism listing
 operation.
 SASL security considerations 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC4422 
\end_layout

\end_inset


\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC5801
\end_layout

\end_inset

 apply (particularly regarding the negotiation of channel binding).
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Using-SCRAM-in"

\end_inset

Using SCRAM in RESTauth
\end_layout

\begin_layout Standard
SCRAM 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC5802
\end_layout

\end_inset

 is a DIGEST-like mechanism for SASL.
 Nothing special is needed to use SCRAM versus any other SASL mechanism,
 except for the round trip optimized form of SCRAM (see below).
 
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Using-SCRAM-with"

\end_inset

Using SCRAM with Round Trip Optimization in RESTauth
\end_layout

\begin_layout Standard
..
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Using-GSS-API-Authentication"

\end_inset

Using GSS-API Authentication Mechanisms with RESTauth
\end_layout

\begin_layout Standard
The Generic Security Services Application Programming Interface (GSS-API)
 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC2743
\end_layout

\end_inset

 is another pluggable mechanism framework.
 Any GSS-API mechanism that supports channel binding 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC5056
\end_layout

\end_inset

 can be used as SASL mechanisms via the 
\begin_inset Quotes eld
\end_inset

SASL/GS2
\begin_inset Quotes erd
\end_inset

 bridge 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC5801
\end_layout

\end_inset

.
 This includes the Kerberos V5 GSS-API mechanism 
\begin_inset Flex EntityXRef
status collapsed

\begin_layout Plain Layout
RFC4121
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:IANA-Considerations"

\end_inset

IANA Considerations
\end_layout

\begin_layout Standard
TBD (header registrations, ...)
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Security-Considerations"

\end_inset

Security Considerations
\end_layout

\begin_layout Standard
This entire document deals with security considerations.
 [Add more, like about channel binding, same-origin-like constraints on
 the login and session absolute URIs', ...]
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:TODO"

\end_inset

TODO
\end_layout

\begin_layout RevisionRemark
Add references (to HTTP/2.0, CGI/fCGI, ...).
\end_layout

\begin_layout RevisionRemark
Describe MAC session binding option and replay protection in detail.
 Describe how to extract keys for MAC keying from SASL/GSS/PACE.
\end_layout

\begin_layout RevisionRemark
Figure out how to adapt IKEv2 password-based methods to RESTauth.
 This may not be worthwhile (since each method tends to depend heavily on
 the entire IKEv2 framework in ways that add messaging that we'd not need
 in RESTauth).
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Normative-References"

\end_inset

Normative References
\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc2119"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc2616"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc2617"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2617.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc5246"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc5056"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5056.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc5929"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5929.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Informative-References"

\end_inset

Informative References
\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "I-D.williams-rest-gss"
target "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.williams-rest-gss.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc4422"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4422.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc5802"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5802.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc4252"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4252.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc4559"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4559.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc6631"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6631.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc2743"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2743.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc5801"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5801.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Flex BibXML
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
name "rfc4121"
target "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4121.xml"

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
