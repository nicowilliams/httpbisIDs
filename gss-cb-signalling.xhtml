<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN" "file:///home/nico/I-Ds/httpbis/../test/src/../data/xhtml-math11-f.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="GENERATOR" content="LyX 2.0.0" />
<meta http-equiv="Content-type" content="text/html;charset=UTF-8" />
<title>Channel Binding Signalling for the Generic Security Services Application Programming Interface</title>

<!-- Text Class Preamble -->
<style type="text/css">
div.toc {
margin: 2em 0em;
border-style: solid;
border-width: 2px 0px;
padding: 1em 0em;
}
div.tochead { font-size: x-large; font-weight: bold; }
div.lyxtoc-0 {
margin: 2em 0em 0em 0em;
font-size: xx-large;
font-weight: bold;
}
div.lyxtoc-1 {
margin: 1em 0em 0em 0em;
font-size: x-large;
font-weight: bold;
}
div.lyxtoc-2 {
margin: 0em 0em 0em 1em;
font-size: large;
font-weight: normal;
}
div.lyxtoc-3 { margin: 0em 0em 0em 0.5em; font-size: medium; }
div.lyxtoc-4 { margin: 0em 0em 0em 0.5em; }
div.lyxtoc-5 { margin: 0em 0em 0em 0.5em; }
div.lyxtoc-6 { margin: 0em 0em 0em 0.5em; }
a.tocentry {
text-decoration: none;
color: black;
}
a.tocentry:visited { color: black; }
a.tocarrow {
font-weight: bold;
text-decoration: none;
color: #909090;
}
a.tocarrow:visited { color: #C0C0C0; }
</style>

<!-- Preamble Snippets -->

<!-- Layout-provided Styles -->
<style type='text/css'>
h1.title {
font-size: x-large;
margin-bottom: 1ex;
text-align: center;

}
div.standard {
text-align: left;

}
div.plain_layout {
text-align: left;

}
div.author {
font-size: large;
margin-top: 1.3ex;
margin-bottom: 0.7ex;
text-align: center;

}
div.abstract {
font-size: small;
margin-top: 0.7ex;
margin-bottom: 0.7ex;
margin-left: 3ex;
margin-right: 3ex;
text-align: left;

}
div.abstract_label {
font-weight: bold;
font-size: large;
text-align: center;

}

div.abstract {
margin: 4ex;
}
div.abstract_item {
font-size: small;
padding-top: 1ex;
}
div.abstract_label {
font-weight: bold;
}
h2.section {
font-weight: bold;
font-size: x-large;
margin-top: 1.3ex;
margin-bottom: 0.7ex;
text-align: left;

}
h3.subsection {
font-weight: bold;
font-size: large;
margin-top: 0.9ex;
margin-bottom: 0.5ex;
text-align: left;

}
ul.itemize {
margin-top: 0.7ex;
margin-bottom: 0.7ex;
margin-left: 3ex;
text-align: left;

}
h4.subsubsection {
font-weight: bold;
font-size: medium;
margin-top: 0.7ex;
margin-bottom: 0.4ex;
text-align: left;

}
dl.description dt { font-weight: bold; }
div.flex_docname {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_ipr {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_intendedstatus {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_titleabbrev {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_ietfarea {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_xml_rfckeyword {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_updates {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_pi_toc {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_pi_symrefs {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_pi_tocindent {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_pi {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_authororg {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_authororgabbrev {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_authoremailaddr {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.flex_entityxref {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
div.listings {
font-family: monospace;
}
div.flex_bibxml {
font-family: serif;
font-weight: normal;
font-style: normal;
font-variant: normal;
font-size: medium;
}
</style>
</head>
<body>
<h1 class="title"><a id='magicparlabel-1' />
Channel Binding Signalling for the Generic Security Services Application Programming Interface</h1>
<div class="standard"><a id='magicparlabel-2' />
<div class="flex_docname"><div class="plain_layout"><a id='magicparlabel-6' />
draft-williams-kitten-channel-bound-flag-03</div>
</div><div class="flex_ipr"><div class="plain_layout"><a id='magicparlabel-10' />
trust200902</div>
</div><div class="flex_intendedstatus"><div class="plain_layout"><a id='magicparlabel-14' />
std</div>
</div><div class="flex_titleabbrev"><div class="plain_layout"><a id='magicparlabel-18' />
GSS Channel Bound Flag</div>
</div><div class="flex_ietfarea"><div class="plain_layout"><a id='magicparlabel-22' />
Security Area</div>
</div><div class="flex_xml_rfckeyword"><div class="plain_layout"><a id='magicparlabel-26' />
Internet-Draft</div>
</div><div class="flex_updates"><div class="plain_layout"><a id='magicparlabel-30' />
RFC2743 RFC2744</div>
</div></div>

<div class="standard"><a id='magicparlabel-31' />
<div class="flex_pi_toc"><div class="plain_layout"><a id='magicparlabel-35' />
yes</div>
</div><div class="flex_pi_symrefs"><div class="plain_layout"><a id='magicparlabel-39' />
yes</div>
</div><div class="flex_pi_tocindent"><div class="plain_layout"><a id='magicparlabel-43' />
no</div>
</div><div class="flex_pi"><div class="plain_layout"><a id='magicparlabel-47' />
comments="yes"</div>
</div><div class="flex_pi"><div class="plain_layout"><a id='magicparlabel-51' />
inline="yes"</div>
</div></div>

<div class="author"><div class="author_item"><a id='magicparlabel-52' />
Nicolas Williams<div class="flex_authororg"><div class="plain_layout"><a id='magicparlabel-56' />
Cryptonector, LLC</div>
</div><div class="flex_authororgabbrev"><div class="plain_layout"><a id='magicparlabel-60' />
Cryptonector</div>
</div><div class="flex_authoremailaddr"><div class="plain_layout"><a id='magicparlabel-64' />
nico@cryptonector.com</div>
</div></div>
</div>

<div class="abstract"><div class="abstract_label">Abstract</div>
<div class="abstract_item"><a id='magicparlabel-65' />
This Internet-Draft proposes the addition of a &ldquo;channel bound&rdquo; return flag for the GSS_Init_sec_context() and GSS_Accept_sec_context() functions. Two behaviors are specified: a default, safe behavior, and a behavior that is only safe when the application specifically tells the Generic Security Services Application Programming Interface (GSS-API) that it (the applicaiton) supports the new behavior.</div>
</div>
<div class="standard"><a id='magicparlabel-66' />
</div>
<div class='toc'><div class='tochead part_'>Table of Contents</div>

<div class='lyxtoc-1'><a href='#magicparlabel-67' class='tocentry'>1 Introduction</a> <a href='#magicparlabel-67' class='tocarrow'>&gt;</a>

<div class='lyxtoc-2'><a href='#magicparlabel-84' class='tocentry'>1.1 Error in RFC2743</a> <a href='#magicparlabel-84' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-2'><a href='#magicparlabel-90' class='tocentry'>1.2 Design</a> <a href='#magicparlabel-90' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-2'><a href='#magicparlabel-96' class='tocentry'>1.3 Alternative Design</a> <a href='#magicparlabel-96' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-2'><a href='#magicparlabel-98' class='tocentry'>1.4 Future Directions</a> <a href='#magicparlabel-98' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-2'><a href='#magicparlabel-100' class='tocentry'>1.5 Conventions used in this document</a> <a href='#magicparlabel-100' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-1'><a href='#magicparlabel-106' class='tocentry'>2 Channel Binding State Extension</a> <a href='#magicparlabel-106' class='tocarrow'>&gt;</a>

<div class='lyxtoc-2'><a href='#magicparlabel-118' class='tocentry'>2.1 GSS_Create_sec_context()</a> <a href='#magicparlabel-118' class='tocarrow'>&gt;</a>

<div class='lyxtoc-3'><a href='#magicparlabel-130' class='tocentry'>2.1.1 C-Bindings</a> <a href='#magicparlabel-130' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-2'><a href='#magicparlabel-138' class='tocentry'>2.2 GSS_Set_context_flags()</a> <a href='#magicparlabel-138' class='tocarrow'>&gt;</a>

<div class='lyxtoc-3'><a href='#magicparlabel-155' class='tocentry'>2.2.1 C-Bindings</a> <a href='#magicparlabel-155' class='tocarrow'>&gt;</a></div>
</div>

<div class='lyxtoc-2'><a href='#magicparlabel-165' class='tocentry'>2.3 Return Flag for Channel Binding State Signalling </a> <a href='#magicparlabel-165' class='tocarrow'>&gt;</a>

<div class='lyxtoc-3'><a href='#magicparlabel-167' class='tocentry'>2.3.1 C-Bindings</a> <a href='#magicparlabel-167' class='tocarrow'>&gt;</a></div>
</div>
</div>

<div class='lyxtoc-1'><a href='#magicparlabel-173' class='tocentry'>3 Modified Channel Binding Semantics</a> <a href='#magicparlabel-173' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-1'><a href='#magicparlabel-179' class='tocentry'>4 Security Considerations</a> <a href='#magicparlabel-179' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-1'><a href='#magicparlabel-189' class='tocentry'>5 IANA Considerations</a> <a href='#magicparlabel-189' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-1'><a href='#magicparlabel-191' class='tocentry'>6 Normative References</a> <a href='#magicparlabel-191' class='tocarrow'>&gt;</a></div>

<div class='lyxtoc-1'><a href='#magicparlabel-217' class='tocentry'>7 Informative References</a> <a href='#magicparlabel-217' class='tocarrow'>&gt;</a></div>
</div>

<h2 class="section"><span class="section_label">1</span> <a id='magicparlabel-67' />
Introduction</h2>
<div class="standard"><a id='magicparlabel-68' />
The GSS-API <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-72' />
RFC2743</div>
</div> supports &ldquo;channel binding&rdquo; <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-76' />
RFC5056</div>
</div>, a technique for detection of man-in-the-middle (MITM) attacks in secure channels at lower network layers. This facility is meant to be all-or-nothing: either both the initiator and acceptor use it and it succeeds, or both must not use it. This has created a negotiation problem when retrofitting the use of channel binding into existing application protocols.</div>

<div class="standard"><a id='magicparlabel-77' />
Many implementations of the Kerberos V5 GSS-API mechanism <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-81' />
RFC4121</div>
</div> cause the acceptor to succeed when the initiator used channel binding but the acceptor application did not. This has helped deployment of channel binding in existing applications: first fix all the initiators, then fix all the acceptors. But even this is insufficient when there are many clients to fix, such that fixing them all will take a long time.</div>

<div class="standard"><a id='magicparlabel-82' />
This document proposes a new method for deployment of channel binding that allows the feature to be enabled on the acceptor side before fixing all initiators. If the GSS-API had always had a return flag by which to indicate channel binding state then we could have had a simpler method of deploying channel binding: applications check that return flag and act accordingly (e.g., fail when channel binding is required). We cannot safely introduce this behavior now without an indication of support by the application.</div>

<div class="standard"><a id='magicparlabel-83' />
It is worth noting that at least one implementor of GSS-API mechanisms (but not of the GSS-API itself) has similar semantics in its API to those proposed herein. [XXX add references to the relevant SSPI docs? -Nico]</div>
<h3 class="subsection"><span class="subsection_label">1.1</span> <a id='magicparlabel-84' />
Error in RFC2743</h3>
<div class="standard"><a id='magicparlabel-85' />
The GSS-APIv2u1 <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-89' />
RFC2743</div>
</div> seems to indicate that mechanisms must ignore channel bindings when one party provided none. In practice some mechanisms ignore channel bindings when the acceptor provides none, but not when the initiator provides none. Note that it would be useless to allow security context establishment to succeed when the initiator does not provide channel bindings but the acceptor does, at least as long as there's no outward indication of whether channel binding was used! And indeed, the GSS-APIv2u1 does not provide any such indication. We correct this flaw in this document.</div>
<h3 class="subsection"><span class="subsection_label">1.2</span> <a id='magicparlabel-90' />
Design</h3>
<div class="standard"><a id='magicparlabel-91' />
After some discussion on the mailing list of various designs for signalling application support for the new flag we've settled on copying an aspect of the Java Bindings of the GSS-API <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-95' />
RFC5653</div>
</div>, specifically the notion of creating an &ldquo;empty&rdquo; SECURITY CONTEXT handle that can then be passed to GSS_Init_sec_context() and GSS_Accept_sec_context() where they normally expect a NULL handle. This empty security context handle can then be used to set options relating to security context token establishment.</div>
<h3 class="subsection"><span class="subsection_label">1.3</span> <a id='magicparlabel-96' />
Alternative Design</h3>
<div class="standard"><a id='magicparlabel-97' />
The previous design was based on an existing, non-standard extension for carrying security context establishment options in CREDENTIAL HANDLEs. Note that a notion of CREDENTIAL HANDLE options might still be useful for options that are really specific to credentials rather than security context tokens (for example: setting an acceptable cryptographic security profile on a CREDENTIAL HANDLE and receiving a new handle with possibly fewer elements, reflecting that some credentials cannot meet the requirement).</div>
<h3 class="subsection"><span class="subsection_label">1.4</span> <a id='magicparlabel-98' />
Future Directions</h3>
<div class="standard"><a id='magicparlabel-99' />
We're likely to introduce additional mutator functions of empty contexts, with mutators corresponding to many of the existing input arguments of GSS_Init_sec_context() and GSS_Accept_sec_context(), as well as a few additional security context inquiry functions. We're also likely to then introduce new variants of GSS_Init_sec_context() and GSS_Accept_sec_context() with all of those input and output parameters removed that could be set or retrieved with the other new functions. The only inputs that the new GSS_Init/Accept_sec_context() must have are: a security context handle (never NULL), and an input context token, and the only outputs should be the status indicators and an output token &ndash; in fact, we may want to have just one new function called, perhaps, GSS_Step_sec_context(), with the role of initiator or acceptor set as a context option.</div>
<h3 class="subsection"><span class="subsection_label">1.5</span> <a id='magicparlabel-100' />
Conventions used in this document</h3>
<div class="standard"><a id='magicparlabel-101' />
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-105' />
RFC2119</div>
</div>.</div>
<h2 class="section"><span class="section_label">2</span> <a id='magicparlabel-106' />
Channel Binding State Extension</h2>
<div class="standard"><a id='magicparlabel-107' />
We propose a new return flag for GSS_Init_sec_context() and GSS_Accept_sec_context(), as well as a pair of functions for a) creating &ldquo;empty&rdquo; security context handles, b) setting req_flags and indicating which ret_flags the application understands. </div>

<div class="standard"><a id='magicparlabel-108' />
C bindings of these extensions are provided along the lines of <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-112' />
RFC2744</div>
</div> and <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-116' />
RFC5587</div>
</div>.</div>

<div class="standard"><a id='magicparlabel-117' />
In the future we might move more of the many input (and output) arguments to GSS_Init_sec_context() and GSS_Accept_sec_context() into mutators on empty security context handles.</div>
<h3 class="subsection"><span class="subsection_label">2.1</span> <a id='magicparlabel-118' />
GSS_Create_sec_context()</h3>
<div class="standard"><a id='magicparlabel-119' />
Inputs:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-120' />
&lt;none&gt;</li>
</ul>
<div class="standard"><a id='magicparlabel-121' />
Outputs:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-122' />
major_status INTEGER</li>
<li class="itemize_item"><a id='magicparlabel-123' />
minor_status INTEGER &ndash; note: mostly useless, but we should keep it</li>
<li class="itemize_item"><a id='magicparlabel-124' />
context SECURITY CONTEXT</li>
</ul>
<div class="standard"><a id='magicparlabel-125' />
Return major status codes:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-126' />
GSS_S_COMPLETE indicates success.</li>
<li class="itemize_item"><a id='magicparlabel-127' />
GSS_S_UNAVAILABLE indicates that memory is not available, for example.</li>
<li class="itemize_item"><a id='magicparlabel-128' />
GSS_S_FAILURE indicates a general failure.</li>
</ul>
<div class="standard"><a id='magicparlabel-129' />
This function creates an &ldquo;empty&rdquo; security context handle that can be passed to GSS_Init_sec_context() or GSS_Accept_sec_context() where they expect a NULL context.</div>
<h4 class="subsubsection"><span class="subsubsection_label">2.1.1</span> <a id='magicparlabel-130' />
C-Bindings</h4>
<div class="standard"><a id='magicparlabel-131' />
</div>
<div class='float float-listings'><pre> OM_uint32
 gss_create_sec_context(OM_uint32 *minor_status,
                        gss_ctx_id_t *context);</pre></div>

<h3 class="subsection"><span class="subsection_label">2.2</span> <a id='magicparlabel-138' />
GSS_Set_context_flags()</h3>
<div class="standard"><a id='magicparlabel-139' />
Inputs:</div>

<dl class='description'><dt class="description_label">context&nbsp;CONTEXT&nbsp;HANDLE</dt>
<dd class="description_item"><a id='magicparlabel-140' />
 </dd>
<dt class="description_label">req_flags&nbsp;FLAGS</dt>
<dd class="description_item"><a id='magicparlabel-141' />
 Requested flags. Applicable to acceptors and initiators.</dd>
<dt class="description_label">ret_flags_understood&nbsp;FLAGS</dt>
<dd class="description_item"><a id='magicparlabel-142' />
 The set of return flags understood by the caller.</dd>
</dl>
<div class="standard"><a id='magicparlabel-143' />
Outputs:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-144' />
major_status INTEGER</li>
<li class="itemize_item"><a id='magicparlabel-145' />
minor_status INTEGER</li>
</ul>
<div class="standard"><a id='magicparlabel-146' />
Return major status codes:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-147' />
GSS_S_COMPLETE indicates success.</li>
<li class="itemize_item"><a id='magicparlabel-148' />
GSS_S_FAILURE indicates a general failure.</li>
</ul>
<div class="standard"><a id='magicparlabel-149' />
This function tells the mechanism (when one is eventually chosen and invoked) that the application requests the given req_flags and undestands the given ret_flags. Initiators can override the req_flags in their GSS_Init_sec_context() call, but if no flags are requested there then the req_flags set on the empty context will be used.</div>

<div class="standard"><a id='magicparlabel-150' />
NOTE: The abstract GSS-API <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-154' />
RFC2743</div>
</div> uses individual elements -one per-flag- instead of a &ldquo;FLAGS&rdquo; type. This is unwieldy, therefore we introduce an abstract type named &ldquo;FLAGS&rdquo; to act as a set of all the request/return flags defined for the abstract GSS-API.</div>
<h4 class="subsubsection"><span class="subsubsection_label">2.2.1</span> <a id='magicparlabel-155' />
C-Bindings</h4>
<div class="standard"><a id='magicparlabel-156' />
</div>
<div class='float float-listings'><pre> OM_uint32
 gss_set_context_flags(OM_uint32 *minor_status,
                       gss_ctx_id_t context,
                       uint64_t req_flags,
                       uint64_t ret_flags);</pre></div>

<h3 class="subsection"><span class="subsection_label">2.3</span> <a id='magicparlabel-165' />
Return Flag for Channel Binding State Signalling </h3>
<div class="standard"><a id='magicparlabel-166' />
Whenever both the initiator and the acceptor provide matching channel bindings to GSS_Init_sec_context() and GSS_Accept_sec_context(), respectively, then the mechanism SHALL indicate that the context is channel bound via an output flag, ret_channel_bound_flag, for the established context. Note that some mechanisms have no way for the acceptor to signal CB success to the initiator, in which case GSS_Init_sec_context() MUST NOT output the ret_channel_bound_flag.</div>
<h4 class="subsubsection"><span class="subsubsection_label">2.3.1</span> <a id='magicparlabel-167' />
C-Bindings</h4>
<div class="standard"><a id='magicparlabel-168' />
</div>
<div class='float float-listings'><pre> #define GSS_C_CHANNEL_BOUND_FLAG 2048 /* 0x00000800 */</pre></div>

<h2 class="section"><span class="section_label">3</span> <a id='magicparlabel-173' />
Modified Channel Binding Semantics</h2>
<div class="standard"><a id='magicparlabel-174' />
The channel binding semantics of the base GSS-API are modified as follows:</div>

<ul class="itemize"><li class="itemize_item"><a id='magicparlabel-175' />
Whenever both, the initiator and acceptor shall have provided input_channel_bindings to GSS_Init/Accept_sec_context() and the channel bindings do not match, then the mechanism MUST fail to establish a security context token. This is a restatement of an existing requirement in the base specification, restated for convenience.</li>
<li class="itemize_item"><a id='magicparlabel-176' />
Whenever the acceptor application shall have a) provided channel bindings to GSS_Accept_sec_context(), and b) not indicated support for the ret_channel_bound_flag flag, then the mechanism MUST fail to establish a security context if the initiator did not provide channel bindings data. This requirement is for security purposes, to make applications predating this document secure, and this requirement reflects actual implementations as deployed.</li>
<li class="itemize_item"><a id='magicparlabel-177' />
Whenever the initiator application shall have a) provided channel bindings to GSS_Init_sec_context(), and b) not indicated support for the ret_channel_bound_flag flag, then the mechanism SHOULD NOT fail to establish a security context just because the acceptor failed to provide channel bindings data. This recommendation is for interoperability purposes, and reflects actual implementations that have been deployed. It is possible that not all security mechanism protocols can implement this requirement easily.</li>
<li class="itemize_item"><a id='magicparlabel-178' />
Whenever the application shall have a) provided channel bindings to GSS_Init_sec_context() or GSS_Accept_sec_context(), and b) indicated support for the ret_channel_bound_flag flag, then the mechanism MUST NOT fail to establish a security context just because the peer did not provide channel bindings data. The mechanism MUST output the ret_channel_bound_flag if both peers provided the same input_channel_bindings to GSS_Init_sec_context() and GSS_Accept_sec_context. The mechanism MUST NOT output the ret_channel_bound_flag if either (or both) peer did not provide input_channel_bindings to GSS_Init/Accept_sec_context(). This requirement restores the original base GSS-API specified behavior, with the addition of the ret_channel_bound_flag flag</li>
</ul>
<h2 class="section"><span class="section_label">4</span> <a id='magicparlabel-179' />
Security Considerations</h2>
<div class="standard"><a id='magicparlabel-180' />
This document deals with security. There are no security considerations that should be documented separately in this section. To recap, this document fixes a significant flaw in the base GSS-API <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-184' />
RFC2743</div>
</div> specification that fortunately has not been implemented, and it adds a feature (that should have been in the base specification) for improved negotiation of use of channel binding <div class="flex_entityxref"><div class="plain_layout"><a id='magicparlabel-188' />
RFC5056</div>
</div>.</div>
<h2 class="section"><span class="section_label">5</span> <a id='magicparlabel-189' />
IANA Considerations</h2>
<div class="standard"><a id='magicparlabel-190' />
This document has no IANA considerations.</div>
<h2 class="section"><span class="section_label">6</span> <a id='magicparlabel-191' />
<a id="sec_References" />
Normative References</h2>
<div class="standard"><a id='magicparlabel-192' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-196' />
<a href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">rfc2119</a></div>
</div></div>

<div class="standard"><a id='magicparlabel-197' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-201' />
<a href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2743.xml">rfc2743</a></div>
</div></div>

<div class="standard"><a id='magicparlabel-202' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-206' />
<a href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2744.xml">rfc2744</a></div>
</div></div>

<div class="standard"><a id='magicparlabel-207' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-211' />
<a href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.5056.xml">rfc5056</a></div>
</div></div>

<div class="standard"><a id='magicparlabel-212' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-216' />
<a href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.5587.xml">rfc5587</a></div>
</div></div>
<h2 class="section"><span class="section_label">7</span> <a id='magicparlabel-217' />
Informative References</h2>
<div class="standard"><a id='magicparlabel-218' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-222' />
<a href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.4121.xml">rfc4121</a></div>
</div></div>

<div class="standard"><a id='magicparlabel-223' />
<div class="flex_bibxml"><div class="plain_layout"><a id='magicparlabel-227' />
<a href="http://xml.resource.org/public/rfc/bibxml/reference.RFC.5653.xml">rfc5653</a></div>
</div></div>
</body>
</html>
